
Password_Lock_Version2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00003a78  00003b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800148  00800148  00003bf4  2**0
                  ALLOC
  3 .stab         00003000  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011dd  00000000  00000000  00006bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 35       	cpi	r26, 0x59	; 89
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 14 	call	0x28c6	; 0x28c6 <main>
      8a:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

static void (*ADC_pfNotification)(void)= NULL;

static u8 ADC_u8BusyFlag =0;        //static not to change any file to change  this variable
static u8 ADMUX_CHANNEL_NUM_MASK=0;
void ADC_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
u8 Local_u8_ADMUX=0b00000000;
     b50:	19 82       	std	Y+1, r1	; 0x01
#if Voltage_Reference == AREF
	CLR_BIT(Local_u8_ADMUX,ADMUX_REFS1);
	CLR_BIT(Local_u8_ADMUX,ADMUX_REFS0);

#elif Voltage_Reference == AVCC
	CLR_BIT(Local_u8_ADMUX,ADMUX_REFS1);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	8f 77       	andi	r24, 0x7F	; 127
     b56:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8_ADMUX,ADMUX_REFS0);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	80 64       	ori	r24, 0x40	; 64
     b5c:	89 83       	std	Y+1, r24	; 0x01
#endif

// Selecting ADC Adjustment
#if ADC_ADJUST == RIGHT

	CLR_BIT(Local_u8_ADMUX,ADMUX_ADLAR);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADCSRA,ADCSRA_ADPS0);
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
	SET_BIT(ADCSRA,ADCSRA_ADPS2);

#elif ADC_PreScalar == 128
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b64:	a6 e2       	ldi	r26, 0x26	; 38
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e6 e2       	ldi	r30, 0x26	; 38
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b72:	a6 e2       	ldi	r26, 0x26	; 38
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e6 e2       	ldi	r30, 0x26	; 38
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b80:	a6 e2       	ldi	r26, 0x26	; 38
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e2       	ldi	r30, 0x26	; 38
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	8c 93       	st	X, r24


#endif

    //Disable AutoTrigger
	CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b8e:	a6 e2       	ldi	r26, 0x26	; 38
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 7d       	andi	r24, 0xDF	; 223
     b9a:	8c 93       	st	X, r24



	//Enable ADC

	SET_BIT(ADCSRA,ADCSRA_ADEN);
     b9c:	a6 e2       	ldi	r26, 0x26	; 38
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e6 e2       	ldi	r30, 0x26	; 38
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	8c 93       	st	X, r24


	ADMUX=Local_u8_ADMUX;
     baa:	e7 e2       	ldi	r30, 0x27	; 39
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	80 83       	st	Z, r24

}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <ADC_u16GetDigitalValue>:


u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNb){
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <ADC_u16GetDigitalValue+0x6>
     bc0:	0f 92       	push	r0
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	8b 83       	std	Y+3, r24	; 0x03

	// ADMUX |=(ADMUX_CHANNEL_NUM_MASK);
	ADMUX |=Copy_u8ChannelNb;
     bc8:	a7 e2       	ldi	r26, 0x27	; 39
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e7 e2       	ldi	r30, 0x27	; 39
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	90 81       	ld	r25, Z
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	89 2b       	or	r24, r25
     bd6:	8c 93       	st	X, r24

	//START CONVERSION
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     bd8:	a6 e2       	ldi	r26, 0x26	; 38
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e6 e2       	ldi	r30, 0x26	; 38
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 64       	ori	r24, 0x40	; 64
     be4:	8c 93       	st	X, r24

	//POLLING ON FLAG

	while (GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
     be6:	e6 e2       	ldi	r30, 0x26	; 38
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 95       	swap	r24
     bee:	8f 70       	andi	r24, 0x0F	; 15
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	81 70       	andi	r24, 0x01	; 1
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	a9 f3       	breq	.-22     	; 0xbe6 <ADC_u16GetDigitalValue+0x2c>

		// CLEAR FLAG
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     bfc:	a6 e2       	ldi	r26, 0x26	; 38
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e6 e2       	ldi	r30, 0x26	; 38
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 61       	ori	r24, 0x10	; 16
     c08:	8c 93       	st	X, r24

		//READ ADC VALUE

		u16 res= ADCL | (ADCH << 8) ;  // Reading Both Regs
     c0a:	e4 e2       	ldi	r30, 0x24	; 36
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	e5 e2       	ldi	r30, 0x25	; 37
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	98 2f       	mov	r25, r24
     c20:	88 27       	eor	r24, r24
     c22:	82 2b       	or	r24, r18
     c24:	93 2b       	or	r25, r19
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01

		return res;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <ADC_voidGetDigitalValueAsynch>:

void ADC_voidGetDigitalValueAsynch(u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(void)) {
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <ADC_voidGetDigitalValueAsynch+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	7b 83       	std	Y+3, r23	; 0x03
     c4a:	6a 83       	std	Y+2, r22	; 0x02

	if (ADC_u8BusyFlag==0 && Copy_pfNotification!= NULL){
     c4c:	80 91 4a 01 	lds	r24, 0x014A
     c50:	88 23       	and	r24, r24
     c52:	19 f5       	brne	.+70     	; 0xc9a <ADC_voidGetDigitalValueAsynch+0x60>
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	f9 f0       	breq	.+62     	; 0xc9a <ADC_voidGetDigitalValueAsynch+0x60>
	// ADMUX &=(ADMUX_CHANNEL_NUM_MASK);
	ADMUX |=Copy_u8ChannelNb;
     c5c:	a7 e2       	ldi	r26, 0x27	; 39
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e7 e2       	ldi	r30, 0x27	; 39
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	90 81       	ld	r25, Z
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	89 2b       	or	r24, r25
     c6a:	8c 93       	st	X, r24

	//Set Flag to make ADC is busy

	ADC_u8BusyFlag=1;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	80 93 4a 01 	sts	0x014A, r24

	// Update Global Pointer to a function
	ADC_pfNotification=Copy_pfNotification;
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	9b 81       	ldd	r25, Y+3	; 0x03
     c76:	90 93 49 01 	sts	0x0149, r25
     c7a:	80 93 48 01 	sts	0x0148, r24

	//Enable ADC Interrupt
	SET_BIT(ADCSRA,ADCSRA_ADIE);
     c7e:	a6 e2       	ldi	r26, 0x26	; 38
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e6 e2       	ldi	r30, 0x26	; 38
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	8c 93       	st	X, r24

	//START CONVERSION
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     c8c:	a6 e2       	ldi	r26, 0x26	; 38
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e6 e2       	ldi	r30, 0x26	; 38
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 64       	ori	r24, 0x40	; 64
     c98:	8c 93       	st	X, r24


	}


}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <__vector_16>:

void __vector_16(void) /* From VECTOR TABLE */           __attribute__((signal)); /* Attribute signal to protect from the compiler from optimization*/
void __vector_16(void)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfNotification!= NULL){
     cd0:	80 91 48 01 	lds	r24, 0x0148
     cd4:	90 91 49 01 	lds	r25, 0x0149
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	71 f0       	breq	.+28     	; 0xcf8 <__vector_16+0x52>
		//Clear Busy Flag
		ADC_u8BusyFlag=0;
     cdc:	10 92 4a 01 	sts	0x014A, r1
		//Disable ADC Interrupt
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
     ce0:	a6 e2       	ldi	r26, 0x26	; 38
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e6 e2       	ldi	r30, 0x26	; 38
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	8c 93       	st	X, r24

		// Calling Notification Function
		ADC_pfNotification();
     cee:	e0 91 48 01 	lds	r30, 0x0148
     cf2:	f0 91 49 01 	lds	r31, 0x0149
     cf6:	09 95       	icall




	}
}
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <ADC_u16GetADCRegValue>:


u16 ADC_u16GetADCRegValue (void){
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62

	return ADC_REG;
     d26:	e4 e2       	ldi	r30, 0x24	; 36
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01

}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <DIO_voidInit>:
/* Desc:This Function Set the initial direction & value of All pins       	  */
/******************************************************************************/


void DIO_voidInit (void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	/*Set all port A pins Direction due to pre-configurations.*/
	DIO_u8_DDRA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION,
     d3c:	ea e3       	ldi	r30, 0x3A	; 58
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	80 83       	st	Z, r24
			 	 	 	 	  DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION,
							  DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);

	/*Set all port B pins Direction due to pre-configurations.*/
	DIO_u8_DDRB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION,
     d44:	e7 e3       	ldi	r30, 0x37	; 55
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	80 83       	st	Z, r24
				 	 	 	  DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION,
							  DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);

	/*Set all port C pins Direction due to pre-configurations.*/
	DIO_u8_DDRC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION,
     d4c:	e4 e3       	ldi	r30, 0x34	; 52
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	80 83       	st	Z, r24
					 	 	  DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION,
							  DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);

	/*Set all port D pins Direction due to pre-configurations.*/
	DIO_u8_DDRD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION,
     d54:	e1 e3       	ldi	r30, 0x31	; 49
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	80 83       	st	Z, r24
					 	 	  DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION,
							  DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);

	/*Set all port A pins Values due to pre-configurations.*/
	DIO_u8_PORTA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE,
     d5c:	eb e3       	ldi	r30, 0x3B	; 59
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	10 82       	st	Z, r1
	 	 	                   DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE,
			                   DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);

	/*Set all port B pins Values due to pre-configurations.*/
	DIO_u8_PORTB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE,
     d62:	e8 e3       	ldi	r30, 0x38	; 56
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	10 82       	st	Z, r1
    			 	 	 	   DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE,
    						   DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);

	/*Set all port C pins Values due to pre-configurations.*/
    DIO_u8_PORTC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE,
     d68:	e5 e3       	ldi	r30, 0x35	; 53
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	10 82       	st	Z, r1
    				 	 	   DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE,
    						   DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);

    /*Set all port D pins Values due to pre-configurations.*/
    DIO_u8_PORTD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE,
     d6e:	e2 e3       	ldi	r30, 0x32	; 50
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	10 82       	st	Z, r1
    				 	 	   DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE,
    						   DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
 }
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <DIO_voidSetPinDirection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2d 97       	sbiw	r28, 0x0d	; 13
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	08 f0       	brcs	.+2      	; 0xd9c <DIO_voidSetPinDirection+0x22>
     d9a:	04 c1       	rjmp	.+520    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	08 f0       	brcs	.+2      	; 0xda4 <DIO_voidSetPinDirection+0x2a>
     da2:	00 c1       	rjmp	.+512    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3d 87       	std	Y+13, r19	; 0x0d
     dac:	2c 87       	std	Y+12, r18	; 0x0c
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <DIO_voidSetPinDirection+0x40>
     db8:	4f c0       	rjmp	.+158    	; 0xe58 <DIO_voidSetPinDirection+0xde>
     dba:	2c 85       	ldd	r18, Y+12	; 0x0c
     dbc:	3d 85       	ldd	r19, Y+13	; 0x0d
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_voidSetPinDirection+0x54>
     dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc6:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	71 f0       	breq	.+28     	; 0xde8 <DIO_voidSetPinDirection+0x6e>
     dcc:	eb c0       	rjmp	.+470    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
     dce:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <DIO_voidSetPinDirection+0x60>
     dd8:	77 c0       	rjmp	.+238    	; 0xec8 <DIO_voidSetPinDirection+0x14e>
     dda:	8c 85       	ldd	r24, Y+12	; 0x0c
     ddc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <DIO_voidSetPinDirection+0x6c>
     de4:	a9 c0       	rjmp	.+338    	; 0xf38 <DIO_voidSetPinDirection+0x1be>
     de6:	de c0       	rjmp	.+444    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8PinDirection) //Check on Direction
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	3b 87       	std	Y+11, r19	; 0x0b
     df0:	2a 87       	std	Y+10, r18	; 0x0a
     df2:	8a 85       	ldd	r24, Y+10	; 0x0a
     df4:	9b 85       	ldd	r25, Y+11	; 0x0b
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	d1 f0       	breq	.+52     	; 0xe2e <DIO_voidSetPinDirection+0xb4>
     dfa:	2a 85       	ldd	r18, Y+10	; 0x0a
     dfc:	3b 85       	ldd	r19, Y+11	; 0x0b
     dfe:	21 30       	cpi	r18, 0x01	; 1
     e00:	31 05       	cpc	r19, r1
     e02:	09 f0       	breq	.+2      	; 0xe06 <DIO_voidSetPinDirection+0x8c>
     e04:	cf c0       	rjmp	.+414    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Output
     e06:	aa e3       	ldi	r26, 0x3A	; 58
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ea e3       	ldi	r30, 0x3A	; 58
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_voidSetPinDirection+0xaa>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_voidSetPinDirection+0xa6>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	bb c0       	rjmp	.+374    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Input
     e2e:	aa e3       	ldi	r26, 0x3A	; 58
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	ea e3       	ldi	r30, 0x3A	; 58
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_voidSetPinDirection+0xd2>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_voidSetPinDirection+0xce>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	a6 c0       	rjmp	.+332    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8PinDirection) //Check on Direction
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	39 87       	std	Y+9, r19	; 0x09
     e60:	28 87       	std	Y+8, r18	; 0x08
     e62:	88 85       	ldd	r24, Y+8	; 0x08
     e64:	99 85       	ldd	r25, Y+9	; 0x09
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	d1 f0       	breq	.+52     	; 0xe9e <DIO_voidSetPinDirection+0x124>
     e6a:	28 85       	ldd	r18, Y+8	; 0x08
     e6c:	39 85       	ldd	r19, Y+9	; 0x09
     e6e:	21 30       	cpi	r18, 0x01	; 1
     e70:	31 05       	cpc	r19, r1
     e72:	09 f0       	breq	.+2      	; 0xe76 <DIO_voidSetPinDirection+0xfc>
     e74:	97 c0       	rjmp	.+302    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Output
     e76:	a7 e3       	ldi	r26, 0x37	; 55
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_voidSetPinDirection+0x11a>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_voidSetPinDirection+0x116>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	83 c0       	rjmp	.+262    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Input
     e9e:	a7 e3       	ldi	r26, 0x37	; 55
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e7 e3       	ldi	r30, 0x37	; 55
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_voidSetPinDirection+0x142>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_voidSetPinDirection+0x13e>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	6e c0       	rjmp	.+220    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8PinDirection) //Check on Direction
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	3f 83       	std	Y+7, r19	; 0x07
     ed0:	2e 83       	std	Y+6, r18	; 0x06
     ed2:	8e 81       	ldd	r24, Y+6	; 0x06
     ed4:	9f 81       	ldd	r25, Y+7	; 0x07
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	d1 f0       	breq	.+52     	; 0xf0e <DIO_voidSetPinDirection+0x194>
     eda:	2e 81       	ldd	r18, Y+6	; 0x06
     edc:	3f 81       	ldd	r19, Y+7	; 0x07
     ede:	21 30       	cpi	r18, 0x01	; 1
     ee0:	31 05       	cpc	r19, r1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <DIO_voidSetPinDirection+0x16c>
     ee4:	5f c0       	rjmp	.+190    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Output
     ee6:	a4 e3       	ldi	r26, 0x34	; 52
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e4 e3       	ldi	r30, 0x34	; 52
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinDirection+0x18a>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinDirection+0x186>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	4b c0       	rjmp	.+150    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Input
     f0e:	a4 e3       	ldi	r26, 0x34	; 52
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinDirection+0x1b2>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinDirection+0x1ae>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	36 c0       	rjmp	.+108    	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8PinDirection) //Check on Direction
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3d 83       	std	Y+5, r19	; 0x05
     f40:	2c 83       	std	Y+4, r18	; 0x04
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	c9 f0       	breq	.+50     	; 0xf7c <DIO_voidSetPinDirection+0x202>
     f4a:	2c 81       	ldd	r18, Y+4	; 0x04
     f4c:	3d 81       	ldd	r19, Y+5	; 0x05
     f4e:	21 30       	cpi	r18, 0x01	; 1
     f50:	31 05       	cpc	r19, r1
     f52:	41 f5       	brne	.+80     	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Output
     f54:	a1 e3       	ldi	r26, 0x31	; 49
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e1 e3       	ldi	r30, 0x31	; 49
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_voidSetPinDirection+0x1f8>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_voidSetPinDirection+0x1f4>
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <DIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Input
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_voidSetPinDirection+0x220>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_voidSetPinDirection+0x21c>
     f9e:	80 95       	com	r24
     fa0:	84 23       	and	r24, r20
     fa2:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
     fa4:	2d 96       	adiw	r28, 0x0d	; 13
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <DIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void DIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Value)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	2d 97       	sbiw	r28, 0x0d	; 13
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <DIO_voidSetPinValue+0x22>
     fd6:	04 c1       	rjmp	.+520    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <DIO_voidSetPinValue+0x2a>
     fde:	00 c1       	rjmp	.+512    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3d 87       	std	Y+13, r19	; 0x0d
     fe8:	2c 87       	std	Y+12, r18	; 0x0c
     fea:	8c 85       	ldd	r24, Y+12	; 0x0c
     fec:	9d 85       	ldd	r25, Y+13	; 0x0d
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_voidSetPinValue+0x40>
     ff4:	4f c0       	rjmp	.+158    	; 0x1094 <DIO_voidSetPinValue+0xde>
     ff6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff8:	3d 85       	ldd	r19, Y+13	; 0x0d
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_voidSetPinValue+0x54>
    1000:	8c 85       	ldd	r24, Y+12	; 0x0c
    1002:	9d 85       	ldd	r25, Y+13	; 0x0d
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	71 f0       	breq	.+28     	; 0x1024 <DIO_voidSetPinValue+0x6e>
    1008:	eb c0       	rjmp	.+470    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
    100a:	2c 85       	ldd	r18, Y+12	; 0x0c
    100c:	3d 85       	ldd	r19, Y+13	; 0x0d
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_voidSetPinValue+0x60>
    1014:	77 c0       	rjmp	.+238    	; 0x1104 <DIO_voidSetPinValue+0x14e>
    1016:	8c 85       	ldd	r24, Y+12	; 0x0c
    1018:	9d 85       	ldd	r25, Y+13	; 0x0d
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <DIO_voidSetPinValue+0x6c>
    1020:	a9 c0       	rjmp	.+338    	; 0x1174 <DIO_voidSetPinValue+0x1be>
    1022:	de c0       	rjmp	.+444    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8Value) //Check on Value
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3b 87       	std	Y+11, r19	; 0x0b
    102c:	2a 87       	std	Y+10, r18	; 0x0a
    102e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1030:	9b 85       	ldd	r25, Y+11	; 0x0b
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	d1 f0       	breq	.+52     	; 0x106a <DIO_voidSetPinValue+0xb4>
    1036:	2a 85       	ldd	r18, Y+10	; 0x0a
    1038:	3b 85       	ldd	r19, Y+11	; 0x0b
    103a:	21 30       	cpi	r18, 0x01	; 1
    103c:	31 05       	cpc	r19, r1
    103e:	09 f0       	breq	.+2      	; 0x1042 <DIO_voidSetPinValue+0x8c>
    1040:	cf c0       	rjmp	.+414    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as High
    1042:	ab e3       	ldi	r26, 0x3B	; 59
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_voidSetPinValue+0xaa>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_voidSetPinValue+0xa6>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	bb c0       	rjmp	.+374    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as Low
    106a:	ab e3       	ldi	r26, 0x3B	; 59
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_voidSetPinValue+0xd2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_voidSetPinValue+0xce>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	a6 c0       	rjmp	.+332    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8Value) //Check on Value
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	39 87       	std	Y+9, r19	; 0x09
    109c:	28 87       	std	Y+8, r18	; 0x08
    109e:	88 85       	ldd	r24, Y+8	; 0x08
    10a0:	99 85       	ldd	r25, Y+9	; 0x09
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	d1 f0       	breq	.+52     	; 0x10da <DIO_voidSetPinValue+0x124>
    10a6:	28 85       	ldd	r18, Y+8	; 0x08
    10a8:	39 85       	ldd	r19, Y+9	; 0x09
    10aa:	21 30       	cpi	r18, 0x01	; 1
    10ac:	31 05       	cpc	r19, r1
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <DIO_voidSetPinValue+0xfc>
    10b0:	97 c0       	rjmp	.+302    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as High
    10b2:	a8 e3       	ldi	r26, 0x38	; 56
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 e3       	ldi	r30, 0x38	; 56
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_voidSetPinValue+0x11a>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_voidSetPinValue+0x116>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	83 c0       	rjmp	.+262    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as Low
    10da:	a8 e3       	ldi	r26, 0x38	; 56
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_voidSetPinValue+0x142>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_voidSetPinValue+0x13e>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	6e c0       	rjmp	.+220    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8Value) //Check on Value
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3f 83       	std	Y+7, r19	; 0x07
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	9f 81       	ldd	r25, Y+7	; 0x07
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	d1 f0       	breq	.+52     	; 0x114a <DIO_voidSetPinValue+0x194>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	21 30       	cpi	r18, 0x01	; 1
    111c:	31 05       	cpc	r19, r1
    111e:	09 f0       	breq	.+2      	; 0x1122 <DIO_voidSetPinValue+0x16c>
    1120:	5f c0       	rjmp	.+190    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as High
    1122:	a5 e3       	ldi	r26, 0x35	; 53
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_voidSetPinValue+0x18a>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_voidSetPinValue+0x186>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	4b c0       	rjmp	.+150    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as Low
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_voidSetPinValue+0x1b2>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_voidSetPinValue+0x1ae>
    116c:	80 95       	com	r24
    116e:	84 23       	and	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	36 c0       	rjmp	.+108    	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8Value) //Check on Value
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3d 83       	std	Y+5, r19	; 0x05
    117c:	2c 83       	std	Y+4, r18	; 0x04
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	c9 f0       	breq	.+50     	; 0x11b8 <DIO_voidSetPinValue+0x202>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	21 30       	cpi	r18, 0x01	; 1
    118c:	31 05       	cpc	r19, r1
    118e:	41 f5       	brne	.+80     	; 0x11e0 <DIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as High
    1190:	a2 e3       	ldi	r26, 0x32	; 50
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e2 e3       	ldi	r30, 0x32	; 50
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_voidSetPinValue+0x1f8>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_voidSetPinValue+0x1f4>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <DIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as Low
    11b8:	a2 e3       	ldi	r26, 0x32	; 50
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_voidSetPinValue+0x220>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_voidSetPinValue+0x21c>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    11e0:	2d 96       	adiw	r28, 0x0d	; 13
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8   DIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_u8GetPinValue+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DIO_u8GetPinValue+0x8>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value=2; //set initial value for needed pin value
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	89 83       	std	Y+1, r24	; 0x01

	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	08 f0       	brcs	.+2      	; 0x1210 <DIO_u8GetPinValue+0x1e>
    120e:	6b c0       	rjmp	.+214    	; 0x12e6 <DIO_u8GetPinValue+0xf4>
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 30       	cpi	r24, 0x08	; 8
    1214:	08 f0       	brcs	.+2      	; 0x1218 <DIO_u8GetPinValue+0x26>
    1216:	67 c0       	rjmp	.+206    	; 0x12e6 <DIO_u8GetPinValue+0xf4>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	4c 81       	ldd	r20, Y+4	; 0x04
    1224:	5d 81       	ldd	r21, Y+5	; 0x05
    1226:	41 30       	cpi	r20, 0x01	; 1
    1228:	51 05       	cpc	r21, r1
    122a:	41 f1       	breq	.+80     	; 0x127c <DIO_u8GetPinValue+0x8a>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	91 05       	cpc	r25, r1
    1234:	34 f4       	brge	.+12     	; 0x1242 <DIO_u8GetPinValue+0x50>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	21 15       	cp	r18, r1
    123c:	31 05       	cpc	r19, r1
    123e:	61 f0       	breq	.+24     	; 0x1258 <DIO_u8GetPinValue+0x66>
    1240:	52 c0       	rjmp	.+164    	; 0x12e6 <DIO_u8GetPinValue+0xf4>
    1242:	4c 81       	ldd	r20, Y+4	; 0x04
    1244:	5d 81       	ldd	r21, Y+5	; 0x05
    1246:	42 30       	cpi	r20, 0x02	; 2
    1248:	51 05       	cpc	r21, r1
    124a:	51 f1       	breq	.+84     	; 0x12a0 <DIO_u8GetPinValue+0xae>
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	b9 f1       	breq	.+110    	; 0x12c4 <DIO_u8GetPinValue+0xd2>
    1256:	47 c0       	rjmp	.+142    	; 0x12e6 <DIO_u8GetPinValue+0xf4>
		{
		case DIO_u8_PORTA:
							local_u8Value = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);  // Read the pin value
    1258:	e9 e3       	ldi	r30, 0x39	; 57
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_u8GetPinValue+0x7e>
    126c:	55 95       	asr	r21
    126e:	47 95       	ror	r20
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_u8GetPinValue+0x7a>
    1274:	ca 01       	movw	r24, r20
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	35 c0       	rjmp	.+106    	; 0x12e6 <DIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTB:
							local_u8Value = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId); // Read the pin value
    127c:	e6 e3       	ldi	r30, 0x36	; 54
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8GetPinValue+0xa2>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8GetPinValue+0x9e>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	23 c0       	rjmp	.+70     	; 0x12e6 <DIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTC:
							local_u8Value = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId); // Read the pin value
    12a0:	e3 e3       	ldi	r30, 0x33	; 51
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8GetPinValue+0xc6>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8GetPinValue+0xc2>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	11 c0       	rjmp	.+34     	; 0x12e6 <DIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTD:
							local_u8Value = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId); // Read the pin value
    12c4:	e0 e3       	ldi	r30, 0x30	; 48
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a9 01       	movw	r20, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_u8GetPinValue+0xea>
    12d8:	55 95       	asr	r21
    12da:	47 95       	ror	r20
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_u8GetPinValue+0xe6>
    12e0:	ca 01       	movw	r24, r20
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else

	return local_u8Value;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_voidSetPortDirection+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_voidSetPortDirection+0x8>
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	90 f5       	brcc	.+100    	; 0x1372 <DIO_voidSetPortDirection+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3c 83       	std	Y+4, r19	; 0x04
    1316:	2b 83       	std	Y+3, r18	; 0x03
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	d1 f0       	breq	.+52     	; 0x1356 <DIO_voidSetPortDirection+0x5e>
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	3c 81       	ldd	r19, Y+4	; 0x04
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <DIO_voidSetPortDirection+0x3e>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <DIO_voidSetPortDirection+0x54>
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <DIO_voidSetPortDirection+0x7a>
    1336:	2b 81       	ldd	r18, Y+3	; 0x03
    1338:	3c 81       	ldd	r19, Y+4	; 0x04
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <DIO_voidSetPortDirection+0x68>
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_voidSetPortDirection+0x72>
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <DIO_voidSetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_DDRA_REG=copy_u8PortDirection;  // Set the port Direction
    134c:	ea e3       	ldi	r30, 0x3A	; 58
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
    1354:	0e c0       	rjmp	.+28     	; 0x1372 <DIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_DDRB_REG=copy_u8PortDirection;  // Set the port Direction
    1356:	e7 e3       	ldi	r30, 0x37	; 55
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <DIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_DDRC_REG=copy_u8PortDirection;  // Set the port Direction
    1360:	e4 e3       	ldi	r30, 0x34	; 52
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <DIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_DDRD_REG=copy_u8PortDirection;  // Set the port Direction
    136a:	e1 e3       	ldi	r30, 0x31	; 49
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	00 d0       	rcall	.+0      	; 0x1386 <DIO_voidSetPortValue+0x6>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <DIO_voidSetPortValue+0x8>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	90 f5       	brcc	.+100    	; 0x13fa <DIO_voidSetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3c 83       	std	Y+4, r19	; 0x04
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	d1 f0       	breq	.+52     	; 0x13de <DIO_voidSetPortValue+0x5e>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <DIO_voidSetPortValue+0x3e>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <DIO_voidSetPortValue+0x54>
    13bc:	1e c0       	rjmp	.+60     	; 0x13fa <DIO_voidSetPortValue+0x7a>
    13be:	2b 81       	ldd	r18, Y+3	; 0x03
    13c0:	3c 81       	ldd	r19, Y+4	; 0x04
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <DIO_voidSetPortValue+0x68>
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <DIO_voidSetPortValue+0x72>
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <DIO_voidSetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_PORTA_REG=copy_u8PortValue;  // Set the port Value
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <DIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_PORTB_REG=copy_u8PortValue;  // Set the port Value
    13de:	e8 e3       	ldi	r30, 0x38	; 56
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <DIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_PORTC_REG=copy_u8PortValue;  // Set the port Value
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <DIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_PORTD_REG=copy_u8PortValue;  // Set the port Value
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <DIO_voidGetPortValue>:
/******************************************************************************/
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/******************************************************************************/
u8 DIO_voidGetPortValue(u8 copy_u8PortId)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_voidGetPortValue+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_voidGetPortValue+0x8>
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue=0;
    1416:	19 82       	std	Y+1, r1	; 0x01
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	90 f5       	brcc	.+100    	; 0x1482 <DIO_voidGetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	d1 f0       	breq	.+52     	; 0x1466 <DIO_voidGetPortValue+0x5e>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_voidGetPortValue+0x3e>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_voidGetPortValue+0x54>
    1444:	1e c0       	rjmp	.+60     	; 0x1482 <DIO_voidGetPortValue+0x7a>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <DIO_voidGetPortValue+0x68>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <DIO_voidGetPortValue+0x72>
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <DIO_voidGetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							local_u8PortValue = DIO_u8_PINA_REG;  // Read the port Value
    145c:	e9 e3       	ldi	r30, 0x39	; 57
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <DIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							local_u8PortValue = DIO_u8_PINB_REG;  // Read the port Value
    1466:	e6 e3       	ldi	r30, 0x36	; 54
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <DIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							local_u8PortValue = DIO_u8_PINC_REG;  // Read the port Value
    1470:	e3 e3       	ldi	r30, 0x33	; 51
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <DIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							local_u8PortValue = DIO_u8_PIND_REG;  // Read the port Value
    147a:	e0 e3       	ldi	r30, 0x30	; 48
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else
	return local_u8PortValue; // return port value
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_Interface.h"
#include "GIE_Register.h"

void GIE_voidEnable(void){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    149a:	af e5       	ldi	r26, 0x5F	; 95
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e5       	ldi	r30, 0x5F	; 95
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	8c 93       	st	X, r24
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <GIE_voidDisable>:


void GIE_voidDisable(void){
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    14b6:	af e5       	ldi	r26, 0x5F	; 95
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ef e5       	ldi	r30, 0x5F	; 95
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8f 77       	andi	r24, 0x7F	; 127
    14c2:	8c 93       	st	X, r24
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <KPD_u8GetPressedKey>:

	const u8 KPD_Au8Rows[ROW_NUMBER]={KPD_ROW0_PIN ,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	const u8 KPD_Au8Cols[COLUMN_NUMBER]={KPD_COLUMN0_PIN ,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	const u8 KPD_Au8Keys[ROW_NUMBER][COLUMN_NUMBER]= KPD_Arr_Value;

u8 KPD_u8GetPressedKey(void){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	62 97       	sbiw	r28, 0x12	; 18
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8RowsCounter , Local_u8ColsCounter , Local_u8Flag=0;
    14de:	1f 86       	std	Y+15, r1	; 0x0f


	for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<ROW_NUMBER ; Local_u8RowsCounter++){
    14e0:	19 8a       	std	Y+17, r1	; 0x11
    14e2:	cb c0       	rjmp	.+406    	; 0x167a <KPD_u8GetPressedKey+0x1b0>

		DIO_voidSetPinValue(KPD_Port,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);
    14e4:	89 89       	ldd	r24, Y+17	; 0x11
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	e0 50       	subi	r30, 0x00	; 0
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	90 81       	ld	r25, Z
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	69 2f       	mov	r22, r25
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

		for (Local_u8ColsCounter =0 ; Local_u8ColsCounter< COLUMN_NUMBER ; Local_u8ColsCounter++){
    14fc:	18 8a       	std	Y+16, r1	; 0x10
    14fe:	94 c0       	rjmp	.+296    	; 0x1628 <KPD_u8GetPressedKey+0x15e>




			if ( DIO_u8GetPinValue(KPD_Port,KPD_Au8Cols[Local_u8ColsCounter]) == DIO_u8_LOW){
    1500:	88 89       	ldd	r24, Y+16	; 0x10
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	fc 01       	movw	r30, r24
    1508:	ec 5f       	subi	r30, 0xFC	; 252
    150a:	fe 4f       	sbci	r31, 0xFE	; 254
    150c:	90 81       	ld	r25, Z
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	69 2f       	mov	r22, r25
    1512:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8GetPinValue>
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <KPD_u8GetPressedKey+0x52>
    151a:	83 c0       	rjmp	.+262    	; 0x1622 <KPD_u8GetPressedKey+0x158>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 ea       	ldi	r26, 0xA0	; 160
    1522:	b1 e4       	ldi	r27, 0x41	; 65
    1524:	8b 87       	std	Y+11, r24	; 0x0b
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	ad 87       	std	Y+13, r26	; 0x0d
    152a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a ef       	ldi	r20, 0xFA	; 250
    153a:	54 e4       	ldi	r21, 0x44	; 68
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	98 87       	std	Y+8, r25	; 0x08
    1548:	a9 87       	std	Y+9, r26	; 0x09
    154a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	6b 85       	ldd	r22, Y+11	; 0x0b
    1588:	7c 85       	ldd	r23, Y+12	; 0x0c
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <KPD_u8GetPressedKey+0x104>
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <KPD_u8GetPressedKey+0xf2>
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <KPD_u8GetPressedKey+0xe6>
    15d6:	17 c0       	rjmp	.+46     	; 0x1606 <KPD_u8GetPressedKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <KPD_u8GetPressedKey+0x12e>
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <KPD_u8GetPressedKey+0x13c>
				_delay_ms(20);

				while (DIO_u8GetPinValue(KPD_Port,KPD_Au8Cols[Local_u8ColsCounter]) == DIO_u8_LOW){
					Local_u8Flag=1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	8f 87       	std	Y+15, r24	; 0x0f


			if ( DIO_u8GetPinValue(KPD_Port,KPD_Au8Cols[Local_u8ColsCounter]) == DIO_u8_LOW){
				_delay_ms(20);

				while (DIO_u8GetPinValue(KPD_Port,KPD_Au8Cols[Local_u8ColsCounter]) == DIO_u8_LOW){
    1606:	88 89       	ldd	r24, Y+16	; 0x10
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	fc 01       	movw	r30, r24
    160e:	ec 5f       	subi	r30, 0xFC	; 252
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	90 81       	ld	r25, Z
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	69 2f       	mov	r22, r25
    1618:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_u8GetPinValue>
    161c:	88 23       	and	r24, r24
    161e:	89 f3       	breq	.-30     	; 0x1602 <KPD_u8GetPressedKey+0x138>
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <KPD_u8GetPressedKey+0x166>

	for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<ROW_NUMBER ; Local_u8RowsCounter++){

		DIO_voidSetPinValue(KPD_Port,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_LOW);

		for (Local_u8ColsCounter =0 ; Local_u8ColsCounter< COLUMN_NUMBER ; Local_u8ColsCounter++){
    1622:	88 89       	ldd	r24, Y+16	; 0x10
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	88 8b       	std	Y+16, r24	; 0x10
    1628:	88 89       	ldd	r24, Y+16	; 0x10
    162a:	84 30       	cpi	r24, 0x04	; 4
    162c:	08 f4       	brcc	.+2      	; 0x1630 <KPD_u8GetPressedKey+0x166>
    162e:	68 cf       	rjmp	.-304    	; 0x1500 <KPD_u8GetPressedKey+0x36>

			}


		}
		DIO_voidSetPinValue(KPD_Port,KPD_Au8Rows[Local_u8RowsCounter],DIO_u8_HIGH);
    1630:	89 89       	ldd	r24, Y+17	; 0x11
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	e0 50       	subi	r30, 0x00	; 0
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	90 81       	ld	r25, Z
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	69 2f       	mov	r22, r25
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

		if (Local_u8Flag == 1){
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	99 f4       	brne	.+38     	; 0x1674 <KPD_u8GetPressedKey+0x1aa>
			return KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    164e:	89 89       	ldd	r24, Y+17	; 0x11
    1650:	48 2f       	mov	r20, r24
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	ca 01       	movw	r24, r20
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	82 0f       	add	r24, r18
    1666:	93 1f       	adc	r25, r19
    1668:	fc 01       	movw	r30, r24
    166a:	e8 5f       	subi	r30, 0xF8	; 248
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	80 81       	ld	r24, Z
    1670:	8a 8b       	std	Y+18, r24	; 0x12
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <KPD_u8GetPressedKey+0x1bc>
u8 KPD_u8GetPressedKey(void){

	u8 Local_u8RowsCounter , Local_u8ColsCounter , Local_u8Flag=0;


	for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<ROW_NUMBER ; Local_u8RowsCounter++){
    1674:	89 89       	ldd	r24, Y+17	; 0x11
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	89 8b       	std	Y+17, r24	; 0x11
    167a:	89 89       	ldd	r24, Y+17	; 0x11
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	08 f4       	brcc	.+2      	; 0x1682 <KPD_u8GetPressedKey+0x1b8>
    1680:	31 cf       	rjmp	.-414    	; 0x14e4 <KPD_u8GetPressedKey+0x1a>
		}


	}

	return KPD_No_Key_Pressed;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	8a 8b       	std	Y+18, r24	; 0x12
    1686:	8a 89       	ldd	r24, Y+18	; 0x12

}
    1688:	62 96       	adiw	r28, 0x12	; 18
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <Password_Check>:

u8 Password_Check(u8 *Copy_u8_PW){
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <Password_Check+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Password_Check+0x8>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Check,Return;
	if ((Copy_u8_PW[0]=='1') && (Copy_u8_PW[1]=='2') && (Copy_u8_PW[0]=='3') ){
    16aa:	eb 81       	ldd	r30, Y+3	; 0x03
    16ac:	fc 81       	ldd	r31, Y+4	; 0x04
    16ae:	80 81       	ld	r24, Z
    16b0:	81 33       	cpi	r24, 0x31	; 49
    16b2:	79 f4       	brne	.+30     	; 0x16d2 <Password_Check+0x38>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	fc 01       	movw	r30, r24
    16ba:	31 96       	adiw	r30, 0x01	; 1
    16bc:	80 81       	ld	r24, Z
    16be:	82 33       	cpi	r24, 0x32	; 50
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <Password_Check+0x38>
    16c2:	eb 81       	ldd	r30, Y+3	; 0x03
    16c4:	fc 81       	ldd	r31, Y+4	; 0x04
    16c6:	80 81       	ld	r24, Z
    16c8:	83 33       	cpi	r24, 0x33	; 51
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <Password_Check+0x38>
		Check=1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <Password_Check+0x3a>
}
	else {
		Check=0;
    16d2:	1a 82       	std	Y+2, r1	; 0x02
	}
	Return = Check;
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
	return Return;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01


}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LCD_voidSendInstruction>:
//MCAL
#include "DIO_Interface.h"



void LCD_voidSendInstruction(u8 Copy_u8_Instruction){
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	2f 97       	sbiw	r28, 0x0f	; 15
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	8f 87       	std	Y+15, r24	; 0x0f
	// RS PIN LOW for command
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_LOW);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

	//RW PIN LOW for write
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

	//SET Command to data
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8_Instruction);
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	6f 85       	ldd	r22, Y+15	; 0x0f
    1716:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_voidSetPortValue>

	//Send enable pulse
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e4       	ldi	r27, 0x40	; 64
    172c:	8b 87       	std	Y+11, r24	; 0x0b
    172e:	9c 87       	std	Y+12, r25	; 0x0c
    1730:	ad 87       	std	Y+13, r26	; 0x0d
    1732:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a ef       	ldi	r20, 0xFA	; 250
    1742:	54 e4       	ldi	r21, 0x44	; 68
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	98 87       	std	Y+8, r25	; 0x08
    1750:	a9 87       	std	Y+9, r26	; 0x09
    1752:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1754:	6f 81       	ldd	r22, Y+7	; 0x07
    1756:	78 85       	ldd	r23, Y+8	; 0x08
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	9a 85       	ldd	r25, Y+10	; 0x0a
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <LCD_voidSendInstruction+0x8e>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <LCD_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <LCD_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <LCD_voidSendInstruction+0xee>
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_voidSendInstruction+0xdc>
    17c8:	9c 83       	std	Y+4, r25	; 0x04
    17ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <LCD_voidSendInstruction+0xd0>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <LCD_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_voidSendInstruction+0x118>
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

}
    1812:	2f 96       	adiw	r28, 0x0f	; 15
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_voidSendData>:
void LCD_voidSendData(u8 Copy_u8_Data){
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	2f 97       	sbiw	r28, 0x0f	; 15
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	8f 87       	std	Y+15, r24	; 0x0f
	// RS PIN HIGH for data
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_HIGH);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

	//RW PIN LOW for write
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>

	//SET Command to data
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8_Data);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	6f 85       	ldd	r22, Y+15	; 0x0f
    1852:	0e 94 c0 09 	call	0x1380	; 0x1380 <DIO_voidSetPortValue>

	//Send enable pulse
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e0       	ldi	r26, 0x00	; 0
    1866:	b0 e4       	ldi	r27, 0x40	; 64
    1868:	8b 87       	std	Y+11, r24	; 0x0b
    186a:	9c 87       	std	Y+12, r25	; 0x0c
    186c:	ad 87       	std	Y+13, r26	; 0x0d
    186e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a ef       	ldi	r20, 0xFA	; 250
    187e:	54 e4       	ldi	r21, 0x44	; 68
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8f 83       	std	Y+7, r24	; 0x07
    188a:	98 87       	std	Y+8, r25	; 0x08
    188c:	a9 87       	std	Y+9, r26	; 0x09
    188e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_voidSendData+0x8e>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_voidSendData+0xee>
    18f4:	88 ec       	ldi	r24, 0xC8	; 200
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_voidSendData+0xdc>
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_voidSendData+0xd0>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_voidSendData+0x118>
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
}
    194e:	2f 96       	adiw	r28, 0x0f	; 15
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <LCD_voidInit>:
void LCD_voidInit(){
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	c6 54       	subi	r28, 0x46	; 70
    196e:	d0 40       	sbci	r29, 0x00	; 0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	fe 01       	movw	r30, r28
    197c:	ed 5b       	subi	r30, 0xBD	; 189
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e2       	ldi	r26, 0x20	; 32
    1986:	b2 e4       	ldi	r27, 0x42	; 66
    1988:	80 83       	st	Z, r24
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	a2 83       	std	Z+2, r26	; 0x02
    198e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	8e 01       	movw	r16, r28
    1992:	01 5c       	subi	r16, 0xC1	; 193
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	fe 01       	movw	r30, r28
    1998:	ed 5b       	subi	r30, 0xBD	; 189
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a ef       	ldi	r20, 0xFA	; 250
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	f8 01       	movw	r30, r16
    19b6:	80 83       	st	Z, r24
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	a2 83       	std	Z+2, r26	; 0x02
    19bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19be:	fe 01       	movw	r30, r28
    19c0:	ff 96       	adiw	r30, 0x3f	; 63
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_voidInit+0x84>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9e af       	std	Y+62, r25	; 0x3e
    19e0:	8d af       	std	Y+61, r24	; 0x3d
    19e2:	46 c0       	rjmp	.+140    	; 0x1a70 <LCD_voidInit+0x110>
	else if (__tmp > 65535)
    19e4:	fe 01       	movw	r30, r28
    19e6:	ff 96       	adiw	r30, 0x3f	; 63
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	64 f5       	brge	.+88     	; 0x1a58 <LCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	fe 01       	movw	r30, r28
    1a02:	ed 5b       	subi	r30, 0xBD	; 189
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9e af       	std	Y+62, r25	; 0x3e
    1a2c:	8d af       	std	Y+61, r24	; 0x3d
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_voidInit+0xee>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9c af       	std	Y+60, r25	; 0x3c
    1a36:	8b af       	std	Y+59, r24	; 0x3b
    1a38:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_voidInit+0xdc>
    1a40:	9c af       	std	Y+60, r25	; 0x3c
    1a42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9e af       	std	Y+62, r25	; 0x3e
    1a4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_voidInit+0xd0>
    1a56:	16 c0       	rjmp	.+44     	; 0x1a84 <LCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ff 96       	adiw	r30, 0x3f	; 63
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9e af       	std	Y+62, r25	; 0x3e
    1a6e:	8d af       	std	Y+61, r24	; 0x3d
    1a70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a74:	9a af       	std	Y+58, r25	; 0x3a
    1a76:	89 af       	std	Y+57, r24	; 0x39
    1a78:	89 ad       	ldd	r24, Y+57	; 0x39
    1a7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_voidInit+0x11c>
    1a80:	9a af       	std	Y+58, r25	; 0x3a
    1a82:	89 af       	std	Y+57, r24	; 0x39

	//Wait for more than 30msec
	_delay_ms(40);

	//Function Set Command
	LCD_voidSendInstruction(LCD_u8_FUNCTION_SET);
    1a84:	88 e3       	ldi	r24, 0x38	; 56
    1a86:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e2       	ldi	r26, 0x20	; 32
    1a90:	b2 e4       	ldi	r27, 0x42	; 66
    1a92:	8d ab       	std	Y+53, r24	; 0x35
    1a94:	9e ab       	std	Y+54, r25	; 0x36
    1a96:	af ab       	std	Y+55, r26	; 0x37
    1a98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	89 ab       	std	Y+49, r24	; 0x31
    1ab4:	9a ab       	std	Y+50, r25	; 0x32
    1ab6:	ab ab       	std	Y+51, r26	; 0x33
    1ab8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aba:	69 a9       	ldd	r22, Y+49	; 0x31
    1abc:	7a a9       	ldd	r23, Y+50	; 0x32
    1abe:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_voidInit+0x17c>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	98 ab       	std	Y+48, r25	; 0x30
    1ad8:	8f a7       	std	Y+47, r24	; 0x2f
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1adc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ade:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6d a9       	ldd	r22, Y+53	; 0x35
    1af6:	7e a9       	ldd	r23, Y+54	; 0x36
    1af8:	8f a9       	ldd	r24, Y+55	; 0x37
    1afa:	98 ad       	ldd	r25, Y+56	; 0x38
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_voidInit+0x1dc>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9e a7       	std	Y+46, r25	; 0x2e
    1b24:	8d a7       	std	Y+45, r24	; 0x2d
    1b26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_voidInit+0x1ca>
    1b2e:	9e a7       	std	Y+46, r25	; 0x2e
    1b30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	98 ab       	std	Y+48, r25	; 0x30
    1b3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_voidInit+0x1be>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	69 a9       	ldd	r22, Y+49	; 0x31
    1b48:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	9c a7       	std	Y+44, r25	; 0x2c
    1b60:	8b a7       	std	Y+43, r24	; 0x2b
    1b62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_voidInit+0x206>
    1b6a:	9c a7       	std	Y+44, r25	; 0x2c
    1b6c:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	//Display ON/OFF Control Command
	LCD_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1b6e:	8c e0       	ldi	r24, 0x0C	; 12
    1b70:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e2       	ldi	r26, 0x20	; 32
    1b7a:	b2 e4       	ldi	r27, 0x42	; 66
    1b7c:	8f a3       	std	Y+39, r24	; 0x27
    1b7e:	98 a7       	std	Y+40, r25	; 0x28
    1b80:	a9 a7       	std	Y+41, r26	; 0x29
    1b82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	6f a1       	ldd	r22, Y+39	; 0x27
    1b86:	78 a5       	ldd	r23, Y+40	; 0x28
    1b88:	89 a5       	ldd	r24, Y+41	; 0x29
    1b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a ef       	ldi	r20, 0xFA	; 250
    1b92:	54 e4       	ldi	r21, 0x44	; 68
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8b a3       	std	Y+35, r24	; 0x23
    1b9e:	9c a3       	std	Y+36, r25	; 0x24
    1ba0:	ad a3       	std	Y+37, r26	; 0x25
    1ba2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    1baa:	9e a1       	ldd	r25, Y+38	; 0x26
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <LCD_voidInit+0x266>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9a a3       	std	Y+34, r25	; 0x22
    1bc2:	89 a3       	std	Y+33, r24	; 0x21
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <LCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bca:	8d a1       	ldd	r24, Y+37	; 0x25
    1bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	4c f5       	brge	.+82     	; 0x1c30 <LCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	6f a1       	ldd	r22, Y+39	; 0x27
    1be0:	78 a5       	ldd	r23, Y+40	; 0x28
    1be2:	89 a5       	ldd	r24, Y+41	; 0x29
    1be4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_voidInit+0x2c6>
    1c08:	88 ec       	ldi	r24, 0xC8	; 200
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	98 a3       	std	Y+32, r25	; 0x20
    1c0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c12:	98 a1       	ldd	r25, Y+32	; 0x20
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_voidInit+0x2b4>
    1c18:	98 a3       	std	Y+32, r25	; 0x20
    1c1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c26:	89 a1       	ldd	r24, Y+33	; 0x21
    1c28:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	69 f7       	brne	.-38     	; 0x1c08 <LCD_voidInit+0x2a8>
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <LCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c30:	6b a1       	ldd	r22, Y+35	; 0x23
    1c32:	7c a1       	ldd	r23, Y+36	; 0x24
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9a a3       	std	Y+34, r25	; 0x22
    1c42:	89 a3       	std	Y+33, r24	; 0x21
    1c44:	89 a1       	ldd	r24, Y+33	; 0x21
    1c46:	9a a1       	ldd	r25, Y+34	; 0x22
    1c48:	9e 8f       	std	Y+30, r25	; 0x1e
    1c4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_voidInit+0x2f0>
    1c54:	9e 8f       	std	Y+30, r25	; 0x1e
    1c56:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);


	LCD_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e2       	ldi	r26, 0x20	; 32
    1c64:	b2 e4       	ldi	r27, 0x42	; 66
    1c66:	89 8f       	std	Y+25, r24	; 0x19
    1c68:	9a 8f       	std	Y+26, r25	; 0x1a
    1c6a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a ef       	ldi	r20, 0xFA	; 250
    1c7c:	54 e4       	ldi	r21, 0x44	; 68
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8d 8b       	std	Y+21, r24	; 0x15
    1c88:	9e 8b       	std	Y+22, r25	; 0x16
    1c8a:	af 8b       	std	Y+23, r26	; 0x17
    1c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c90:	7e 89       	ldd	r23, Y+22	; 0x16
    1c92:	8f 89       	ldd	r24, Y+23	; 0x17
    1c94:	98 8d       	ldd	r25, Y+24	; 0x18
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <LCD_voidInit+0x350>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <LCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <LCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9c 8b       	std	Y+20, r25	; 0x14
    1cee:	8b 8b       	std	Y+19, r24	; 0x13
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <LCD_voidInit+0x3b0>
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9a 8b       	std	Y+18, r25	; 0x12
    1cf8:	89 8b       	std	Y+17, r24	; 0x11
    1cfa:	89 89       	ldd	r24, Y+17	; 0x11
    1cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_voidInit+0x39e>
    1d02:	9a 8b       	std	Y+18, r25	; 0x12
    1d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	8b 89       	ldd	r24, Y+19	; 0x13
    1d08:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	8b 89       	ldd	r24, Y+19	; 0x13
    1d12:	9c 89       	ldd	r25, Y+20	; 0x14
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <LCD_voidInit+0x392>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <LCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d20:	98 8d       	ldd	r25, Y+24	; 0x18
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9c 8b       	std	Y+20, r25	; 0x14
    1d2c:	8b 8b       	std	Y+19, r24	; 0x13
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	98 8b       	std	Y+16, r25	; 0x10
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
    1d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d38:	98 89       	ldd	r25, Y+16	; 0x10
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_voidInit+0x3da>
    1d3e:	98 8b       	std	Y+16, r25	; 0x10
    1d40:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);

	LCD_voidSendInstruction(LCD_u8_ENTRY_MODE);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b2 e4       	ldi	r27, 0x42	; 66
    1d50:	8b 87       	std	Y+11, r24	; 0x0b
    1d52:	9c 87       	std	Y+12, r25	; 0x0c
    1d54:	ad 87       	std	Y+13, r26	; 0x0d
    1d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	4a ef       	ldi	r20, 0xFA	; 250
    1d66:	54 e4       	ldi	r21, 0x44	; 68
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	8f 83       	std	Y+7, r24	; 0x07
    1d72:	98 87       	std	Y+8, r25	; 0x08
    1d74:	a9 87       	std	Y+9, r26	; 0x09
    1d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <LCD_voidInit+0x43a>
		__ticks = 1;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	3f c0       	rjmp	.+126    	; 0x1e18 <LCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	4f e7       	ldi	r20, 0x7F	; 127
    1da8:	57 e4       	ldi	r21, 0x47	; 71
    1daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dae:	18 16       	cp	r1, r24
    1db0:	4c f5       	brge	.+82     	; 0x1e04 <LCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e2       	ldi	r20, 0x20	; 32
    1dc0:	51 e4       	ldi	r21, 0x41	; 65
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <LCD_voidInit+0x49a>
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9c 83       	std	Y+4, r25	; 0x04
    1de2:	8b 83       	std	Y+3, r24	; 0x03
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_voidInit+0x488>
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	69 f7       	brne	.-38     	; 0x1ddc <LCD_voidInit+0x47c>
    1e02:	14 c0       	rjmp	.+40     	; 0x1e2c <LCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	6f 81       	ldd	r22, Y+7	; 0x07
    1e06:	78 85       	ldd	r23, Y+8	; 0x08
    1e08:	89 85       	ldd	r24, Y+9	; 0x09
    1e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_voidInit+0x4c4>
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
}
    1e2c:	ca 5b       	subi	r28, 0xBA	; 186
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <LCD_voidSendString>:


void LCD_voidSendString(u8 *Copy_String){
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <LCD_voidSendString+0x6>
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	9b 83       	std	Y+3, r25	; 0x03
    1e52:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i=0;Copy_String[i]>0;i++){
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <LCD_voidSendString+0x30>
		LCD_voidSendData(Copy_String[i]);
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	fc 01       	movw	r30, r24
    1e64:	e2 0f       	add	r30, r18
    1e66:	f3 1f       	adc	r31, r19
    1e68:	80 81       	ld	r24, Z
    1e6a:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_voidSendData>
}


void LCD_voidSendString(u8 *Copy_String){
	u8 i;
	for (i=0;Copy_String[i]>0;i++){
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	80 81       	ld	r24, Z
    1e86:	88 23       	and	r24, r24
    1e88:	39 f7       	brne	.-50     	; 0x1e58 <LCD_voidSendString+0x14>
		LCD_voidSendData(Copy_String[i]);
	}

}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(){
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
}
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_voidGoToPos>:


void LCD_voidGoToPos(u8 Copy_u8_XPos,u8 Copy_u8_YPos){
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <LCD_voidGoToPos+0x6>
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
    1eb8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address;
	if (Copy_u8_XPos == 0){
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	88 23       	and	r24, r24
    1ebe:	19 f4       	brne	.+6      	; 0x1ec6 <LCD_voidGoToPos+0x1c>
		Local_Address=Copy_u8_YPos;
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <LCD_voidGoToPos+0x28>
	}
	else if (Copy_u8_XPos == 1){
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <LCD_voidGoToPos+0x28>
		Local_Address=Copy_u8_YPos+ 64 ;  // 0x40 because of the start of second row
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	80 5c       	subi	r24, 0xC0	; 192
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_voidSendInstruction(Local_Address+LCD_u8_POSITION);         // 128 because of 1 in instruction data sheet
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	80 58       	subi	r24, 0x80	; 128
    1ed6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_voidWriteSpecialCharacter>:


void LCD_voidWriteSpecialCharacter(u8* Copy_u8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos){
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	27 97       	sbiw	r28, 0x07	; 7
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	6d 83       	std	Y+5, r22	; 0x05
    1f00:	4e 83       	std	Y+6, r20	; 0x06
    1f02:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8CGRAM_Address=0,Local_u8_Iterator;
    1f04:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate CGRAM Address each block 8 bytes
	Local_u8CGRAM_Address=Copy_u8PatternNumber*8;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD
	LCD_voidSendInstruction(Local_u8CGRAM_Address+64);
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	80 5c       	subi	r24, 0xC0	; 192
    1f1e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LCD_voidSendInstruction>

	// Write Pattern into CGRAM
	for (Local_u8_Iterator=0;Local_u8_Iterator<8;Local_u8_Iterator++){
    1f22:	19 82       	std	Y+1, r1	; 0x01
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <LCD_voidWriteSpecialCharacter+0x5c>
		LCD_voidSendData(Copy_u8Pattern[Local_u8_Iterator]);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	80 81       	ld	r24, Z
    1f38:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_voidSendData>

	//Send CGRAM Address command to LCD
	LCD_voidSendInstruction(Local_u8CGRAM_Address+64);

	// Write Pattern into CGRAM
	for (Local_u8_Iterator=0;Local_u8_Iterator<8;Local_u8_Iterator++){
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	78 f3       	brcs	.-34     	; 0x1f26 <LCD_voidWriteSpecialCharacter+0x40>
		LCD_voidSendData(Copy_u8Pattern[Local_u8_Iterator]);
	}

	LCD_voidGoToPos(Copy_u8XPos,Copy_u8YPos);
    1f48:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>

	//Display pattern written into the CGRAM

	LCD_voidSendData(Copy_u8PatternNumber);
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_voidSendData>
}
    1f56:	27 96       	adiw	r28, 0x07	; 7
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <LCD_voidMyNameAra>:



void LCD_voidMyNameAra(){
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	ce 54       	subi	r28, 0x4E	; 78
    1f72:	d0 40       	sbci	r29, 0x00	; 0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
				   0b00000001,
				   0b00000010,
				   0b00011111,
				   0b00000000,
				   0b00000000,
				   0b00000000};
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	9a ab       	std	Y+50, r25	; 0x32
    1f84:	89 ab       	std	Y+49, r24	; 0x31
    1f86:	e0 e4       	ldi	r30, 0x40	; 64
    1f88:	f1 e0       	ldi	r31, 0x01	; 1
    1f8a:	fc ab       	std	Y+52, r31	; 0x34
    1f8c:	eb ab       	std	Y+51, r30	; 0x33
    1f8e:	f8 e0       	ldi	r31, 0x08	; 8
    1f90:	fd ab       	std	Y+53, r31	; 0x35
    1f92:	eb a9       	ldd	r30, Y+51	; 0x33
    1f94:	fc a9       	ldd	r31, Y+52	; 0x34
    1f96:	00 80       	ld	r0, Z
    1f98:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	9c ab       	std	Y+52, r25	; 0x34
    1fa0:	8b ab       	std	Y+51, r24	; 0x33
    1fa2:	e9 a9       	ldd	r30, Y+49	; 0x31
    1fa4:	fa a9       	ldd	r31, Y+50	; 0x32
    1fa6:	00 82       	st	Z, r0
    1fa8:	89 a9       	ldd	r24, Y+49	; 0x31
    1faa:	9a a9       	ldd	r25, Y+50	; 0x32
    1fac:	01 96       	adiw	r24, 0x01	; 1
    1fae:	9a ab       	std	Y+50, r25	; 0x32
    1fb0:	89 ab       	std	Y+49, r24	; 0x31
    1fb2:	9d a9       	ldd	r25, Y+53	; 0x35
    1fb4:	91 50       	subi	r25, 0x01	; 1
    1fb6:	9d ab       	std	Y+53, r25	; 0x35
    1fb8:	ed a9       	ldd	r30, Y+53	; 0x35
    1fba:	ee 23       	and	r30, r30
    1fbc:	51 f7       	brne	.-44     	; 0x1f92 <LCD_voidMyNameAra+0x2a>

		LCD_voidWriteSpecialCharacter(arr,0,0,8);
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	28 e0       	ldi	r18, 0x08	; 8
    1fc8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
				    0b00000111,
					0b00000101,
					0b00011111,
				    0b00000000,
				    0b00000000,
				    0b00000000};
    1fcc:	ce 01       	movw	r24, r28
    1fce:	09 96       	adiw	r24, 0x09	; 9
    1fd0:	9f ab       	std	Y+55, r25	; 0x37
    1fd2:	8e ab       	std	Y+54, r24	; 0x36
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f1 e0       	ldi	r31, 0x01	; 1
    1fd8:	f9 af       	std	Y+57, r31	; 0x39
    1fda:	e8 af       	std	Y+56, r30	; 0x38
    1fdc:	f8 e0       	ldi	r31, 0x08	; 8
    1fde:	fa af       	std	Y+58, r31	; 0x3a
    1fe0:	e8 ad       	ldd	r30, Y+56	; 0x38
    1fe2:	f9 ad       	ldd	r31, Y+57	; 0x39
    1fe4:	00 80       	ld	r0, Z
    1fe6:	88 ad       	ldd	r24, Y+56	; 0x38
    1fe8:	99 ad       	ldd	r25, Y+57	; 0x39
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	99 af       	std	Y+57, r25	; 0x39
    1fee:	88 af       	std	Y+56, r24	; 0x38
    1ff0:	ee a9       	ldd	r30, Y+54	; 0x36
    1ff2:	ff a9       	ldd	r31, Y+55	; 0x37
    1ff4:	00 82       	st	Z, r0
    1ff6:	8e a9       	ldd	r24, Y+54	; 0x36
    1ff8:	9f a9       	ldd	r25, Y+55	; 0x37
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	9f ab       	std	Y+55, r25	; 0x37
    1ffe:	8e ab       	std	Y+54, r24	; 0x36
    2000:	9a ad       	ldd	r25, Y+58	; 0x3a
    2002:	91 50       	subi	r25, 0x01	; 1
    2004:	9a af       	std	Y+58, r25	; 0x3a
    2006:	ea ad       	ldd	r30, Y+58	; 0x3a
    2008:	ee 23       	and	r30, r30
    200a:	51 f7       	brne	.-44     	; 0x1fe0 <LCD_voidMyNameAra+0x78>

		LCD_voidWriteSpecialCharacter(arr1,1,0,7);
    200c:	ce 01       	movw	r24, r28
    200e:	09 96       	adiw	r24, 0x09	; 9
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	27 e0       	ldi	r18, 0x07	; 7
    2016:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
				    0b00000000,
					0b00000000,
					0b00000011,
				    0b00000100,
				    0b00001000,
				    0b00010000};
    201a:	ce 01       	movw	r24, r28
    201c:	41 96       	adiw	r24, 0x11	; 17
    201e:	9c af       	std	Y+60, r25	; 0x3c
    2020:	8b af       	std	Y+59, r24	; 0x3b
    2022:	e0 e3       	ldi	r30, 0x30	; 48
    2024:	f1 e0       	ldi	r31, 0x01	; 1
    2026:	fe af       	std	Y+62, r31	; 0x3e
    2028:	ed af       	std	Y+61, r30	; 0x3d
    202a:	f8 e0       	ldi	r31, 0x08	; 8
    202c:	ff af       	std	Y+63, r31	; 0x3f
    202e:	ed ad       	ldd	r30, Y+61	; 0x3d
    2030:	fe ad       	ldd	r31, Y+62	; 0x3e
    2032:	00 80       	ld	r0, Z
    2034:	8d ad       	ldd	r24, Y+61	; 0x3d
    2036:	9e ad       	ldd	r25, Y+62	; 0x3e
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	9e af       	std	Y+62, r25	; 0x3e
    203c:	8d af       	std	Y+61, r24	; 0x3d
    203e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2040:	fc ad       	ldd	r31, Y+60	; 0x3c
    2042:	00 82       	st	Z, r0
    2044:	8b ad       	ldd	r24, Y+59	; 0x3b
    2046:	9c ad       	ldd	r25, Y+60	; 0x3c
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	9c af       	std	Y+60, r25	; 0x3c
    204c:	8b af       	std	Y+59, r24	; 0x3b
    204e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2050:	91 50       	subi	r25, 0x01	; 1
    2052:	9f af       	std	Y+63, r25	; 0x3f
    2054:	ef ad       	ldd	r30, Y+63	; 0x3f
    2056:	ee 23       	and	r30, r30
    2058:	51 f7       	brne	.-44     	; 0x202e <LCD_voidMyNameAra+0xc6>

		LCD_voidWriteSpecialCharacter(arr2,2,0,6);
    205a:	ce 01       	movw	r24, r28
    205c:	41 96       	adiw	r24, 0x11	; 17
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	26 e0       	ldi	r18, 0x06	; 6
    2064:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
				   0b00000001,
				   0b00000010,
				   0b00011111,
				   0b00000000,
				   0b00000000,
				   0b00000000};
    2068:	ce 01       	movw	r24, r28
    206a:	49 96       	adiw	r24, 0x19	; 25
    206c:	22 96       	adiw	r28, 0x02	; 2
    206e:	9f af       	std	Y+63, r25	; 0x3f
    2070:	8e af       	std	Y+62, r24	; 0x3e
    2072:	22 97       	sbiw	r28, 0x02	; 2
    2074:	e8 e2       	ldi	r30, 0x28	; 40
    2076:	f1 e0       	ldi	r31, 0x01	; 1
    2078:	24 96       	adiw	r28, 0x04	; 4
    207a:	ff af       	std	Y+63, r31	; 0x3f
    207c:	ee af       	std	Y+62, r30	; 0x3e
    207e:	24 97       	sbiw	r28, 0x04	; 4
    2080:	f8 e0       	ldi	r31, 0x08	; 8
    2082:	25 96       	adiw	r28, 0x05	; 5
    2084:	ff af       	std	Y+63, r31	; 0x3f
    2086:	25 97       	sbiw	r28, 0x05	; 5
    2088:	24 96       	adiw	r28, 0x04	; 4
    208a:	ee ad       	ldd	r30, Y+62	; 0x3e
    208c:	ff ad       	ldd	r31, Y+63	; 0x3f
    208e:	24 97       	sbiw	r28, 0x04	; 4
    2090:	00 80       	ld	r0, Z
    2092:	24 96       	adiw	r28, 0x04	; 4
    2094:	8e ad       	ldd	r24, Y+62	; 0x3e
    2096:	9f ad       	ldd	r25, Y+63	; 0x3f
    2098:	24 97       	sbiw	r28, 0x04	; 4
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	24 96       	adiw	r28, 0x04	; 4
    209e:	9f af       	std	Y+63, r25	; 0x3f
    20a0:	8e af       	std	Y+62, r24	; 0x3e
    20a2:	24 97       	sbiw	r28, 0x04	; 4
    20a4:	22 96       	adiw	r28, 0x02	; 2
    20a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    20a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    20aa:	22 97       	sbiw	r28, 0x02	; 2
    20ac:	00 82       	st	Z, r0
    20ae:	22 96       	adiw	r28, 0x02	; 2
    20b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    20b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    20b4:	22 97       	sbiw	r28, 0x02	; 2
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	22 96       	adiw	r28, 0x02	; 2
    20ba:	9f af       	std	Y+63, r25	; 0x3f
    20bc:	8e af       	std	Y+62, r24	; 0x3e
    20be:	22 97       	sbiw	r28, 0x02	; 2
    20c0:	25 96       	adiw	r28, 0x05	; 5
    20c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    20c4:	25 97       	sbiw	r28, 0x05	; 5
    20c6:	91 50       	subi	r25, 0x01	; 1
    20c8:	25 96       	adiw	r28, 0x05	; 5
    20ca:	9f af       	std	Y+63, r25	; 0x3f
    20cc:	25 97       	sbiw	r28, 0x05	; 5
    20ce:	25 96       	adiw	r28, 0x05	; 5
    20d0:	ef ad       	ldd	r30, Y+63	; 0x3f
    20d2:	25 97       	sbiw	r28, 0x05	; 5
    20d4:	ee 23       	and	r30, r30
    20d6:	c1 f6       	brne	.-80     	; 0x2088 <LCD_voidMyNameAra+0x120>

		LCD_voidWriteSpecialCharacter(arr3,3,0,5);
    20d8:	ce 01       	movw	r24, r28
    20da:	49 96       	adiw	r24, 0x19	; 25
    20dc:	63 e0       	ldi	r22, 0x03	; 3
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	25 e0       	ldi	r18, 0x05	; 5
    20e2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
				    0b00000101,
				    0b00000011,
				    0b00011111,
				    0b00000000,
				    0b00000000,
				    0b00000000};
    20e6:	ce 01       	movw	r24, r28
    20e8:	81 96       	adiw	r24, 0x21	; 33
    20ea:	27 96       	adiw	r28, 0x07	; 7
    20ec:	9f af       	std	Y+63, r25	; 0x3f
    20ee:	8e af       	std	Y+62, r24	; 0x3e
    20f0:	27 97       	sbiw	r28, 0x07	; 7
    20f2:	e0 e2       	ldi	r30, 0x20	; 32
    20f4:	f1 e0       	ldi	r31, 0x01	; 1
    20f6:	29 96       	adiw	r28, 0x09	; 9
    20f8:	ff af       	std	Y+63, r31	; 0x3f
    20fa:	ee af       	std	Y+62, r30	; 0x3e
    20fc:	29 97       	sbiw	r28, 0x09	; 9
    20fe:	f8 e0       	ldi	r31, 0x08	; 8
    2100:	2a 96       	adiw	r28, 0x0a	; 10
    2102:	ff af       	std	Y+63, r31	; 0x3f
    2104:	2a 97       	sbiw	r28, 0x0a	; 10
    2106:	29 96       	adiw	r28, 0x09	; 9
    2108:	ee ad       	ldd	r30, Y+62	; 0x3e
    210a:	ff ad       	ldd	r31, Y+63	; 0x3f
    210c:	29 97       	sbiw	r28, 0x09	; 9
    210e:	00 80       	ld	r0, Z
    2110:	29 96       	adiw	r28, 0x09	; 9
    2112:	8e ad       	ldd	r24, Y+62	; 0x3e
    2114:	9f ad       	ldd	r25, Y+63	; 0x3f
    2116:	29 97       	sbiw	r28, 0x09	; 9
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	29 96       	adiw	r28, 0x09	; 9
    211c:	9f af       	std	Y+63, r25	; 0x3f
    211e:	8e af       	std	Y+62, r24	; 0x3e
    2120:	29 97       	sbiw	r28, 0x09	; 9
    2122:	27 96       	adiw	r28, 0x07	; 7
    2124:	ee ad       	ldd	r30, Y+62	; 0x3e
    2126:	ff ad       	ldd	r31, Y+63	; 0x3f
    2128:	27 97       	sbiw	r28, 0x07	; 7
    212a:	00 82       	st	Z, r0
    212c:	27 96       	adiw	r28, 0x07	; 7
    212e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2130:	9f ad       	ldd	r25, Y+63	; 0x3f
    2132:	27 97       	sbiw	r28, 0x07	; 7
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	27 96       	adiw	r28, 0x07	; 7
    2138:	9f af       	std	Y+63, r25	; 0x3f
    213a:	8e af       	std	Y+62, r24	; 0x3e
    213c:	27 97       	sbiw	r28, 0x07	; 7
    213e:	2a 96       	adiw	r28, 0x0a	; 10
    2140:	9f ad       	ldd	r25, Y+63	; 0x3f
    2142:	2a 97       	sbiw	r28, 0x0a	; 10
    2144:	91 50       	subi	r25, 0x01	; 1
    2146:	2a 96       	adiw	r28, 0x0a	; 10
    2148:	9f af       	std	Y+63, r25	; 0x3f
    214a:	2a 97       	sbiw	r28, 0x0a	; 10
    214c:	2a 96       	adiw	r28, 0x0a	; 10
    214e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2150:	2a 97       	sbiw	r28, 0x0a	; 10
    2152:	ee 23       	and	r30, r30
    2154:	c1 f6       	brne	.-80     	; 0x2106 <LCD_voidMyNameAra+0x19e>

		LCD_voidWriteSpecialCharacter(arr4,4,0,4);
    2156:	ce 01       	movw	r24, r28
    2158:	81 96       	adiw	r24, 0x21	; 33
    215a:	64 e0       	ldi	r22, 0x04	; 4
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	24 e0       	ldi	r18, 0x04	; 4
    2160:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
				   0b00000001,
				   0b00000010,
				   0b00000111,
				   0b00000000,
				   0b00000000,
				   0b00000000};
    2164:	ce 01       	movw	r24, r28
    2166:	89 96       	adiw	r24, 0x29	; 41
    2168:	2c 96       	adiw	r28, 0x0c	; 12
    216a:	9f af       	std	Y+63, r25	; 0x3f
    216c:	8e af       	std	Y+62, r24	; 0x3e
    216e:	2c 97       	sbiw	r28, 0x0c	; 12
    2170:	e8 e1       	ldi	r30, 0x18	; 24
    2172:	f1 e0       	ldi	r31, 0x01	; 1
    2174:	2e 96       	adiw	r28, 0x0e	; 14
    2176:	ff af       	std	Y+63, r31	; 0x3f
    2178:	ee af       	std	Y+62, r30	; 0x3e
    217a:	2e 97       	sbiw	r28, 0x0e	; 14
    217c:	f8 e0       	ldi	r31, 0x08	; 8
    217e:	2f 96       	adiw	r28, 0x0f	; 15
    2180:	ff af       	std	Y+63, r31	; 0x3f
    2182:	2f 97       	sbiw	r28, 0x0f	; 15
    2184:	2e 96       	adiw	r28, 0x0e	; 14
    2186:	ee ad       	ldd	r30, Y+62	; 0x3e
    2188:	ff ad       	ldd	r31, Y+63	; 0x3f
    218a:	2e 97       	sbiw	r28, 0x0e	; 14
    218c:	00 80       	ld	r0, Z
    218e:	2e 96       	adiw	r28, 0x0e	; 14
    2190:	8e ad       	ldd	r24, Y+62	; 0x3e
    2192:	9f ad       	ldd	r25, Y+63	; 0x3f
    2194:	2e 97       	sbiw	r28, 0x0e	; 14
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	2e 96       	adiw	r28, 0x0e	; 14
    219a:	9f af       	std	Y+63, r25	; 0x3f
    219c:	8e af       	std	Y+62, r24	; 0x3e
    219e:	2e 97       	sbiw	r28, 0x0e	; 14
    21a0:	2c 96       	adiw	r28, 0x0c	; 12
    21a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    21a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    21a6:	2c 97       	sbiw	r28, 0x0c	; 12
    21a8:	00 82       	st	Z, r0
    21aa:	2c 96       	adiw	r28, 0x0c	; 12
    21ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    21b0:	2c 97       	sbiw	r28, 0x0c	; 12
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	2c 96       	adiw	r28, 0x0c	; 12
    21b6:	9f af       	std	Y+63, r25	; 0x3f
    21b8:	8e af       	std	Y+62, r24	; 0x3e
    21ba:	2c 97       	sbiw	r28, 0x0c	; 12
    21bc:	2f 96       	adiw	r28, 0x0f	; 15
    21be:	9f ad       	ldd	r25, Y+63	; 0x3f
    21c0:	2f 97       	sbiw	r28, 0x0f	; 15
    21c2:	91 50       	subi	r25, 0x01	; 1
    21c4:	2f 96       	adiw	r28, 0x0f	; 15
    21c6:	9f af       	std	Y+63, r25	; 0x3f
    21c8:	2f 97       	sbiw	r28, 0x0f	; 15
    21ca:	2f 96       	adiw	r28, 0x0f	; 15
    21cc:	ef ad       	ldd	r30, Y+63	; 0x3f
    21ce:	2f 97       	sbiw	r28, 0x0f	; 15
    21d0:	ee 23       	and	r30, r30
    21d2:	c1 f6       	brne	.-80     	; 0x2184 <LCD_voidMyNameAra+0x21c>

		LCD_voidWriteSpecialCharacter(arr5,5,0,3);
    21d4:	ce 01       	movw	r24, r28
    21d6:	89 96       	adiw	r24, 0x29	; 41
    21d8:	65 e0       	ldi	r22, 0x05	; 5
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	23 e0       	ldi	r18, 0x03	; 3
    21de:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_voidWriteSpecialCharacter>
}
    21e2:	c2 5b       	subi	r28, 0xB2	; 178
    21e4:	df 4f       	sbci	r29, 0xFF	; 255
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_voidWriteNumber>:


void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	c6 54       	subi	r28, 0x46	; 70
    2204:	d0 40       	sbci	r29, 0x00	; 0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	fe 01       	movw	r30, r28
    2212:	ed 5b       	subi	r30, 0xBD	; 189
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 83       	st	Z, r22
    2218:	71 83       	std	Z+1, r23	; 0x01
    221a:	82 83       	std	Z+2, r24	; 0x02
    221c:	93 83       	std	Z+3, r25	; 0x03
	int arr[20];
	int i = 0;
    221e:	1e 82       	std	Y+6, r1	; 0x06
    2220:	1d 82       	std	Y+5, r1	; 0x05
    2222:	40 c0       	rjmp	.+128    	; 0x22a4 <LCD_voidWriteNumber+0xae>

	// Till N becomes 0
	while (Copy_u32Number != 0) {

		// Extract the last digit of N
		r = Copy_u32Number % 10;
    2224:	fe 01       	movw	r30, r28
    2226:	ed 5b       	subi	r30, 0xBD	; 189
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	a2 81       	ldd	r26, Z+2	; 0x02
    2230:	b3 81       	ldd	r27, Z+3	; 0x03
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodsi4>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01

		// Put the digit in arr[]
		arr[i] = r;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	9c 01       	movw	r18, r24
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	ce 01       	movw	r24, r28
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	82 0f       	add	r24, r18
    225a:	93 1f       	adc	r25, r19
    225c:	fc 01       	movw	r30, r24
    225e:	36 96       	adiw	r30, 0x06	; 6
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	9a 81       	ldd	r25, Y+2	; 0x02
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
		i++;
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05

		// Update N to N/10 to extract
		// next last digit
		Copy_u32Number = Copy_u32Number / 10;
    2272:	8e 01       	movw	r16, r28
    2274:	0d 5b       	subi	r16, 0xBD	; 189
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	ed 5b       	subi	r30, 0xBD	; 189
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	a2 81       	ldd	r26, Z+2	; 0x02
    2284:	b3 81       	ldd	r27, Z+3	; 0x03
    2286:	2a e0       	ldi	r18, 0x0A	; 10
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodsi4>
    2296:	da 01       	movw	r26, r20
    2298:	c9 01       	movw	r24, r18
    229a:	f8 01       	movw	r30, r16
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	a2 83       	std	Z+2, r26	; 0x02
    22a2:	b3 83       	std	Z+3, r27	; 0x03
	int arr[20];
	int i = 0;
	int j, r;

	// Till N becomes 0
	while (Copy_u32Number != 0) {
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 5b       	subi	r30, 0xBD	; 189
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	a2 81       	ldd	r26, Z+2	; 0x02
    22b0:	b3 81       	ldd	r27, Z+3	; 0x03
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	a1 05       	cpc	r26, r1
    22b6:	b1 05       	cpc	r27, r1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <LCD_voidWriteNumber+0xc6>
    22ba:	b4 cf       	rjmp	.-152    	; 0x2224 <LCD_voidWriteNumber+0x2e>

	}

	// Print the digit of N by traversing
	// arr[] reverse
	for (j = i - 1; j > -1; j--)
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	8b 83       	std	Y+3, r24	; 0x03
    22c6:	1e c0       	rjmp	.+60     	; 0x2304 <LCD_voidWriteNumber+0x10e>
	{
		char aNumberAsString[20];
		itoa(arr[j],aNumberAsString ,10);
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	9c 01       	movw	r18, r24
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	fc 01       	movw	r30, r24
    22dc:	36 96       	adiw	r30, 0x06	; 6
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	9e 01       	movw	r18, r28
    22e4:	21 5d       	subi	r18, 0xD1	; 209
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	b9 01       	movw	r22, r18
    22ea:	4a e0       	ldi	r20, 0x0A	; 10
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <itoa>
		LCD_voidSendString(aNumberAsString);
    22f2:	ce 01       	movw	r24, r28
    22f4:	8f 96       	adiw	r24, 0x2f	; 47
    22f6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>

	}

	// Print the digit of N by traversing
	// arr[] reverse
	for (j = i - 1; j > -1; j--)
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9c 83       	std	Y+4, r25	; 0x04
    2302:	8b 83       	std	Y+3, r24	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	99 23       	and	r25, r25
    230a:	f4 f6       	brge	.-68     	; 0x22c8 <LCD_voidWriteNumber+0xd2>
	{
		char aNumberAsString[20];
		itoa(arr[j],aNumberAsString ,10);
		LCD_voidSendString(aNumberAsString);
	}
}
    230c:	ca 5b       	subi	r28, 0xBA	; 186
    230e:	df 4f       	sbci	r29, 0xFF	; 255
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	08 95       	ret

00002324 <PORT_voidInit>:
#include "Port_Private.h"
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void){
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62

	DDRA=PORTA_DIR;
    232c:	ea e3       	ldi	r30, 0x3A	; 58
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	87 ee       	ldi	r24, 0xE7	; 231
    2332:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2334:	e7 e3       	ldi	r30, 0x37	; 55
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 ef       	ldi	r24, 0xF0	; 240
    233a:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    233c:	e4 e3       	ldi	r30, 0x34	; 52
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    2344:	e1 e3       	ldi	r30, 0x31	; 49
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 e3       	ldi	r24, 0x30	; 48
    234a:	80 83       	st	Z, r24

	PORTA=PORTA_INITIAL_VALUE;
    234c:	eb e3       	ldi	r30, 0x3B	; 59
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    2352:	e8 e3       	ldi	r30, 0x38	; 56
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	80 83       	st	Z, r24
	PORTC=PORTC_INITIAL_VALUE;
    235a:	e5 e3       	ldi	r30, 0x35	; 53
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    2360:	e2 e3       	ldi	r30, 0x32	; 50
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	10 82       	st	Z, r1




}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <TMRS_voidTMR0Init>:

static void(*TMRS_pfTimer1)(void)= NULL ;
static void(*TMRS_pfTimer1CTCA)(void)= NULL ;
static void(*TMRS_pfTimer1CTCB)(void)= NULL ;

void TMRS_voidTMR0Init(void){
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62

#if TMR_MODE0 == NORMAL

	CLR_BIT(TCCR0,TCCR0_WGM00);
    2374:	a3 e5       	ldi	r26, 0x53	; 83
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e3 e5       	ldi	r30, 0x53	; 83
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8f 7b       	andi	r24, 0xBF	; 191
    2380:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    2382:	a3 e5       	ldi	r26, 0x53	; 83
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e3 e5       	ldi	r30, 0x53	; 83
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	8c 93       	st	X, r24

	TCNT0=PRELOAD_VALUE0;
    2390:	e2 e5       	ldi	r30, 0x52	; 82
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 ec       	ldi	r24, 0xC0	; 192
    2396:	80 83       	st	Z, r24

	SET_BIT(TIMSK,TIMSK_TOIE0);
    2398:	a9 e5       	ldi	r26, 0x59	; 89
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e9 e5       	ldi	r30, 0x59	; 89
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	81 60       	ori	r24, 0x01	; 1
    23a4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS00);


#elif CLK_PreScalar0 == DIV_BY_8

	CLR_BIT(TCCR0,TCCR0_CS02);
    23a6:	a3 e5       	ldi	r26, 0x53	; 83
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e3 e5       	ldi	r30, 0x53	; 83
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	8b 7f       	andi	r24, 0xFB	; 251
    23b2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    23b4:	a3 e5       	ldi	r26, 0x53	; 83
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e3 e5       	ldi	r30, 0x53	; 83
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	82 60       	ori	r24, 0x02	; 2
    23c0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS00);
    23c2:	a3 e5       	ldi	r26, 0x53	; 83
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e3 e5       	ldi	r30, 0x53	; 83
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	8e 7f       	andi	r24, 0xFE	; 254
    23ce:	8c 93       	st	X, r24

#endif



}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <TMRS_voidTimer0SetCompareMatchValue>:



void TMRS_voidTimer0SetCompareMatchValue(u8 Copy_u8_Value){
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01

	OCR0=Copy_u8_Value;
    23e2:	ec e5       	ldi	r30, 0x5C	; 92
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	80 83       	st	Z, r24
}
    23ea:	0f 90       	pop	r0
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <TMRS_voidTimer0SetCallBack>:

void TMRS_voidTimer0SetCallBack(void (*Copy_pf) (void)){
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <TMRS_voidTimer0SetCallBack+0x6>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pf != NULL ){
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	31 f0       	breq	.+12     	; 0x2414 <TMRS_voidTimer0SetCallBack+0x22>
		TMRS_pfTimer0OVF=Copy_pf;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	9a 81       	ldd	r25, Y+2	; 0x02
    240c:	90 93 4d 01 	sts	0x014D, r25
    2410:	80 93 4c 01 	sts	0x014C, r24
	}

}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <__vector_11>:

#if TMR_MODE0 == NORMAL

void __vector_11(void) __attribute__((signal));

void __vector_11(void) {
    241e:	1f 92       	push	r1
    2420:	0f 92       	push	r0
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	0f 92       	push	r0
    2426:	11 24       	eor	r1, r1
    2428:	2f 93       	push	r18
    242a:	3f 93       	push	r19
    242c:	4f 93       	push	r20
    242e:	5f 93       	push	r21
    2430:	6f 93       	push	r22
    2432:	7f 93       	push	r23
    2434:	8f 93       	push	r24
    2436:	9f 93       	push	r25
    2438:	af 93       	push	r26
    243a:	bf 93       	push	r27
    243c:	ef 93       	push	r30
    243e:	ff 93       	push	r31
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62

	if (TMRS_pfTimer0OVF != NULL){
    2448:	80 91 4c 01 	lds	r24, 0x014C
    244c:	90 91 4d 01 	lds	r25, 0x014D
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	29 f0       	breq	.+10     	; 0x245e <__vector_11+0x40>
		TMRS_pfTimer0OVF();
    2454:	e0 91 4c 01 	lds	r30, 0x014C
    2458:	f0 91 4d 01 	lds	r31, 0x014D
    245c:	09 95       	icall
	}
}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	ff 91       	pop	r31
    2464:	ef 91       	pop	r30
    2466:	bf 91       	pop	r27
    2468:	af 91       	pop	r26
    246a:	9f 91       	pop	r25
    246c:	8f 91       	pop	r24
    246e:	7f 91       	pop	r23
    2470:	6f 91       	pop	r22
    2472:	5f 91       	pop	r21
    2474:	4f 91       	pop	r20
    2476:	3f 91       	pop	r19
    2478:	2f 91       	pop	r18
    247a:	0f 90       	pop	r0
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	0f 90       	pop	r0
    2480:	1f 90       	pop	r1
    2482:	18 95       	reti

00002484 <TMRS_voidTMR1Init>:
*/
#endif



void TMRS_voidTMR1Init(void){
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,TCCR1B_WGM12);
	SET_BIT(TCCR1B,TCCR1B_WGM13);

#elif TMR_MODE1 == MODE_14

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    248c:	af e4       	ldi	r26, 0x4F	; 79
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ef e4       	ldi	r30, 0x4F	; 79
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    249a:	af e4       	ldi	r26, 0x4F	; 79
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ef e4       	ldi	r30, 0x4F	; 79
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	82 60       	ori	r24, 0x02	; 2
    24a6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    24a8:	ae e4       	ldi	r26, 0x4E	; 78
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ee e4       	ldi	r30, 0x4E	; 78
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 60       	ori	r24, 0x08	; 8
    24b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    24b6:	ae e4       	ldi	r26, 0x4E	; 78
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	ee e4       	ldi	r30, 0x4E	; 78
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	80 61       	ori	r24, 0x10	; 16
    24c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COMA0);
	SET_BIT(TCCR1A,TCCR1A_COMA1);

#elif TMR_ACTION1 == NON_INVERTING

	CLR_BIT(TCCR1A,TCCR1A_COMA0);
    24c4:	af e4       	ldi	r26, 0x4F	; 79
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ef e4       	ldi	r30, 0x4F	; 79
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	8f 7b       	andi	r24, 0xBF	; 191
    24d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COMA1);
    24d2:	af e4       	ldi	r26, 0x4F	; 79
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e4       	ldi	r30, 0x4F	; 79
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	80 68       	ori	r24, 0x80	; 128
    24de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR0_CS00);


#elif CLK_PreScalar1 == DIV_BY_8

	CLR_BIT(TCCR1B,TCCR0_CS02);
    24e0:	ae e4       	ldi	r26, 0x4E	; 78
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	ee e4       	ldi	r30, 0x4E	; 78
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	8b 7f       	andi	r24, 0xFB	; 251
    24ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR0_CS01);
    24ee:	ae e4       	ldi	r26, 0x4E	; 78
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ee e4       	ldi	r30, 0x4E	; 78
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	82 60       	ori	r24, 0x02	; 2
    24fa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR0_CS00);
    24fc:	ae e4       	ldi	r26, 0x4E	; 78
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	ee e4       	ldi	r30, 0x4E	; 78
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8e 7f       	andi	r24, 0xFE	; 254
    2508:	8c 93       	st	X, r24





}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <TMRS_voidTimer1SetCompareMatchValue>:

void TMRS_voidTimer1SetCompareMatchValue(u16 Copy_u8OCR1Value) {
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <TMRS_voidTimer1SetCompareMatchValue+0x6>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
#if CHANNEL == A
	OCR1A = Copy_u8OCR1Value;
    251e:	ea e4       	ldi	r30, 0x4A	; 74
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
#elif CHANNEL == B
	OCR1B = Copy_u8OCR1Value;
#endif
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <TMRS_voidTimer1SetOverflowValue>:

void TMRS_voidTimer1SetOverflowValue(u16 Copy_u8ICR1Value) {
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <TMRS_voidTimer1SetOverflowValue+0x6>
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = Copy_u8ICR1Value ;
    2542:	e6 e4       	ldi	r30, 0x46	; 70
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24


}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <TMRS_voidTimer1SetCallBack>:


void TMRS_voidTimer1SetCallBack(void (*Copy_pf) (void)){
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <TMRS_voidTimer1SetCallBack+0x6>
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pf != NULL ){
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	31 f0       	breq	.+12     	; 0x257a <TMRS_voidTimer1SetCallBack+0x22>
		TMRS_pfTimer1=Copy_pf;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	90 93 51 01 	sts	0x0151, r25
    2576:	80 93 50 01 	sts	0x0150, r24
	}

}
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <ServoSwing>:
	}
}

#endif

void ServoSwing (u8 Copy_u8ServoAngle) {
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	ad 97       	sbiw	r28, 0x2d	; 45
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	8b a7       	std	Y+43, r24	; 0x2b

     switch(Copy_u8ServoAngle) {
    259a:	8b a5       	ldd	r24, Y+43	; 0x2b
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	3d a7       	std	Y+45, r19	; 0x2d
    25a2:	2c a7       	std	Y+44, r18	; 0x2c
    25a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    25a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    25a8:	8a 35       	cpi	r24, 0x5A	; 90
    25aa:	91 05       	cpc	r25, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <ServoSwing+0x2c>
    25ae:	84 c0       	rjmp	.+264    	; 0x26b8 <ServoSwing+0x134>
    25b0:	2c a5       	ldd	r18, Y+44	; 0x2c
    25b2:	3d a5       	ldd	r19, Y+45	; 0x2d
    25b4:	24 3b       	cpi	r18, 0xB4	; 180
    25b6:	31 05       	cpc	r19, r1
    25b8:	09 f4       	brne	.+2      	; 0x25bc <ServoSwing+0x38>
    25ba:	f7 c0       	rjmp	.+494    	; 0x27aa <ServoSwing+0x226>
    25bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    25be:	9d a5       	ldd	r25, Y+45	; 0x2d
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <ServoSwing+0x42>
    25c4:	6a c1       	rjmp	.+724    	; 0x289a <ServoSwing+0x316>

     case 0:

	OCR1A = 999;
    25c6:	ea e4       	ldi	r30, 0x4A	; 74
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	87 ee       	ldi	r24, 0xE7	; 231
    25cc:	93 e0       	ldi	r25, 0x03	; 3
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	aa ef       	ldi	r26, 0xFA	; 250
    25d8:	b3 e4       	ldi	r27, 0x43	; 67
    25da:	8f a3       	std	Y+39, r24	; 0x27
    25dc:	98 a7       	std	Y+40, r25	; 0x28
    25de:	a9 a7       	std	Y+41, r26	; 0x29
    25e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6f a1       	ldd	r22, Y+39	; 0x27
    25e4:	78 a5       	ldd	r23, Y+40	; 0x28
    25e6:	89 a5       	ldd	r24, Y+41	; 0x29
    25e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8b a3       	std	Y+35, r24	; 0x23
    25fc:	9c a3       	std	Y+36, r25	; 0x24
    25fe:	ad a3       	std	Y+37, r26	; 0x25
    2600:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2602:	6b a1       	ldd	r22, Y+35	; 0x23
    2604:	7c a1       	ldd	r23, Y+36	; 0x24
    2606:	8d a1       	ldd	r24, Y+37	; 0x25
    2608:	9e a1       	ldd	r25, Y+38	; 0x26
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <ServoSwing+0xa0>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9a a3       	std	Y+34, r25	; 0x22
    2620:	89 a3       	std	Y+33, r24	; 0x21
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <ServoSwing+0x11e>
	else if (__tmp > 65535)
    2624:	6b a1       	ldd	r22, Y+35	; 0x23
    2626:	7c a1       	ldd	r23, Y+36	; 0x24
    2628:	8d a1       	ldd	r24, Y+37	; 0x25
    262a:	9e a1       	ldd	r25, Y+38	; 0x26
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <ServoSwing+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6f a1       	ldd	r22, Y+39	; 0x27
    263e:	78 a5       	ldd	r23, Y+40	; 0x28
    2640:	89 a5       	ldd	r24, Y+41	; 0x29
    2642:	9a a5       	ldd	r25, Y+42	; 0x2a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9a a3       	std	Y+34, r25	; 0x22
    2662:	89 a3       	std	Y+33, r24	; 0x21
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <ServoSwing+0x100>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	98 a3       	std	Y+32, r25	; 0x20
    266c:	8f 8f       	std	Y+31, r24	; 0x1f
    266e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2670:	98 a1       	ldd	r25, Y+32	; 0x20
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <ServoSwing+0xee>
    2676:	98 a3       	std	Y+32, r25	; 0x20
    2678:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <ServoSwing+0xe2>
    268c:	06 c1       	rjmp	.+524    	; 0x289a <ServoSwing+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6b a1       	ldd	r22, Y+35	; 0x23
    2690:	7c a1       	ldd	r23, Y+36	; 0x24
    2692:	8d a1       	ldd	r24, Y+37	; 0x25
    2694:	9e a1       	ldd	r25, Y+38	; 0x26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	9e 8f       	std	Y+30, r25	; 0x1e
    26a8:	8d 8f       	std	Y+29, r24	; 0x1d
    26aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <ServoSwing+0x12a>
    26b2:	9e 8f       	std	Y+30, r25	; 0x1e
    26b4:	8d 8f       	std	Y+29, r24	; 0x1d
    26b6:	f1 c0       	rjmp	.+482    	; 0x289a <ServoSwing+0x316>
     _delay_ms(500);  break;

     case 90:

	OCR1A = 1499;
    26b8:	ea e4       	ldi	r30, 0x4A	; 74
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8b ed       	ldi	r24, 0xDB	; 219
    26be:	95 e0       	ldi	r25, 0x05	; 5
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	aa ef       	ldi	r26, 0xFA	; 250
    26ca:	b3 e4       	ldi	r27, 0x43	; 67
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    26ce:	9a 8f       	std	Y+26, r25	; 0x1a
    26d0:	ab 8f       	std	Y+27, r26	; 0x1b
    26d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 8b       	std	Y+21, r24	; 0x15
    26ee:	9e 8b       	std	Y+22, r25	; 0x16
    26f0:	af 8b       	std	Y+23, r26	; 0x17
    26f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <ServoSwing+0x192>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <ServoSwing+0x210>
	else if (__tmp > 65535)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <ServoSwing+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	69 8d       	ldd	r22, Y+25	; 0x19
    2730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <ServoSwing+0x1f2>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	9a 89       	ldd	r25, Y+18	; 0x12
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <ServoSwing+0x1e0>
    2768:	9a 8b       	std	Y+18, r25	; 0x12
    276a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <ServoSwing+0x1d4>
    277e:	8d c0       	rjmp	.+282    	; 0x289a <ServoSwing+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <ServoSwing+0x21c>
    27a4:	98 8b       	std	Y+16, r25	; 0x10
    27a6:	8f 87       	std	Y+15, r24	; 0x0f
    27a8:	78 c0       	rjmp	.+240    	; 0x289a <ServoSwing+0x316>
     _delay_ms(500); break;

     case 180:

	OCR1A = 1999;
    27aa:	ea e4       	ldi	r30, 0x4A	; 74
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	8f ec       	ldi	r24, 0xCF	; 207
    27b0:	97 e0       	ldi	r25, 0x07	; 7
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	aa ef       	ldi	r26, 0xFA	; 250
    27bc:	b3 e4       	ldi	r27, 0x43	; 67
    27be:	8b 87       	std	Y+11, r24	; 0x0b
    27c0:	9c 87       	std	Y+12, r25	; 0x0c
    27c2:	ad 87       	std	Y+13, r26	; 0x0d
    27c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    27cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8f 83       	std	Y+7, r24	; 0x07
    27e0:	98 87       	std	Y+8, r25	; 0x08
    27e2:	a9 87       	std	Y+9, r26	; 0x09
    27e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e8       	ldi	r20, 0x80	; 128
    27f4:	5f e3       	ldi	r21, 0x3F	; 63
    27f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fa:	88 23       	and	r24, r24
    27fc:	2c f4       	brge	.+10     	; 0x2808 <ServoSwing+0x284>
		__ticks = 1;
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	3f c0       	rjmp	.+126    	; 0x2886 <ServoSwing+0x302>
	else if (__tmp > 65535)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	4c f5       	brge	.+82     	; 0x2872 <ServoSwing+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e2       	ldi	r20, 0x20	; 32
    282e:	51 e4       	ldi	r21, 0x41	; 65
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	0f c0       	rjmp	.+30     	; 0x2868 <ServoSwing+0x2e4>
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <ServoSwing+0x2d2>
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	69 f7       	brne	.-38     	; 0x284a <ServoSwing+0x2c6>
    2870:	14 c0       	rjmp	.+40     	; 0x289a <ServoSwing+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9e 83       	std	Y+6, r25	; 0x06
    2884:	8d 83       	std	Y+5, r24	; 0x05
    2886:	8d 81       	ldd	r24, Y+5	; 0x05
    2888:	9e 81       	ldd	r25, Y+6	; 0x06
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <ServoSwing+0x30e>
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
     default: break;

     }


}
    289a:	ad 96       	adiw	r28, 0x2d	; 45
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <GetDigital>:


u16 App_u16ADCDigitalValue =0;

static u8 FLAG=0;
void GetDigital(void){
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62


	App_u16ADCDigitalValue = ADC_u16GetADCRegValue();
    28b4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <ADC_u16GetADCRegValue>
    28b8:	90 93 57 01 	sts	0x0157, r25
    28bc:	80 93 56 01 	sts	0x0156, r24
}
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <main>:


void main (void){
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	c7 5a       	subi	r28, 0xA7	; 167
    28d4:	d0 40       	sbci	r29, 0x00	; 0
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61

	u8 Password[3];
	u8 i, Reading,Check,flag=0,Reset,time;
    28e0:	fe 01       	movw	r30, r28
    28e2:	ef 55       	subi	r30, 0x5F	; 95
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	10 82       	st	Z, r1
	u16 Local_u16AnalogValue=0;
    28e8:	fe 01       	movw	r30, r28
    28ea:	e3 56       	subi	r30, 0x63	; 99
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	11 82       	std	Z+1, r1	; 0x01
    28f0:	10 82       	st	Z, r1
	u16 Local_u16Temp=0;
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 56       	subi	r30, 0x65	; 101
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	11 82       	std	Z+1, r1	; 0x01
    28fa:	10 82       	st	Z, r1


	TMRS_voidTMR1Init();
    28fc:	0e 94 42 12 	call	0x2484	; 0x2484 <TMRS_voidTMR1Init>
	PORT_voidInit();
    2900:	0e 94 92 11 	call	0x2324	; 0x2324 <PORT_voidInit>
	ADC_voidInit();
    2904:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	TMRS_voidTMR0Init();
    2908:	0e 94 b6 11 	call	0x236c	; 0x236c <TMRS_voidTMR0Init>

	LCD_voidInit();
    290c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_voidInit>

	GIE_voidEnable();
    2910:	0e 94 49 0a 	call	0x1492	; 0x1492 <GIE_voidEnable>



	LCD_voidGoToPos(0,1);
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>
	LCD_voidSendString("Welcome To");
    291c:	80 e6       	ldi	r24, 0x60	; 96
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
	LCD_voidGoToPos(1,1);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>
	LCD_voidSendString("Omar House");
    292c:	8b e6       	ldi	r24, 0x6B	; 107
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    2934:	fe 01       	movw	r30, r28
    2936:	e9 56       	subi	r30, 0x69	; 105
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e8       	ldi	r25, 0x80	; 128
    293e:	ab e3       	ldi	r26, 0x3B	; 59
    2940:	b5 e4       	ldi	r27, 0x45	; 69
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	8e 01       	movw	r16, r28
    294c:	0d 56       	subi	r16, 0x6D	; 109
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e9 56       	subi	r30, 0x69	; 105
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2978:	fe 01       	movw	r30, r28
    297a:	ed 56       	subi	r30, 0x6D	; 109
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	44 f4       	brge	.+16     	; 0x29a6 <main+0xe0>
		__ticks = 1;
    2996:	fe 01       	movw	r30, r28
    2998:	ef 56       	subi	r30, 0x6F	; 111
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	64 c0       	rjmp	.+200    	; 0x2a6e <main+0x1a8>
	else if (__tmp > 65535)
    29a6:	fe 01       	movw	r30, r28
    29a8:	ed 56       	subi	r30, 0x6D	; 109
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	0c f0       	brlt	.+2      	; 0x29c6 <main+0x100>
    29c4:	43 c0       	rjmp	.+134    	; 0x2a4c <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	fe 01       	movw	r30, r28
    29c8:	e9 56       	subi	r30, 0x69	; 105
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8e 01       	movw	r16, r28
    29e6:	0f 56       	subi	r16, 0x6F	; 111
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	1f c0       	rjmp	.+62     	; 0x2a3c <main+0x176>
    29fe:	fe 01       	movw	r30, r28
    2a00:	e1 57       	subi	r30, 0x71	; 113
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e1 57       	subi	r30, 0x71	; 113
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <main+0x150>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e1 57       	subi	r30, 0x71	; 113
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	de 01       	movw	r26, r28
    2a26:	af 56       	subi	r26, 0x6F	; 111
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ef 56       	subi	r30, 0x6F	; 111
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 56       	subi	r30, 0x6F	; 111
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	d1 f6       	brne	.-76     	; 0x29fe <main+0x138>
    2a4a:	27 c0       	rjmp	.+78     	; 0x2a9a <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0f 56       	subi	r16, 0x6F	; 111
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 56       	subi	r30, 0x6D	; 109
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	80 83       	st	Z, r24
    2a6e:	de 01       	movw	r26, r28
    2a70:	a3 57       	subi	r26, 0x73	; 115
    2a72:	bf 4f       	sbci	r27, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	ef 56       	subi	r30, 0x6F	; 111
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	8d 93       	st	X+, r24
    2a80:	9c 93       	st	X, r25
    2a82:	fe 01       	movw	r30, r28
    2a84:	e3 57       	subi	r30, 0x73	; 115
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <main+0x1c6>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e3 57       	subi	r30, 0x73	; 115
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
	_delay_ms(3000);
	LCD_voidClearDisplay();
    2a9a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>

	LCD_voidSendString("Enter Password");
    2a9e:	86 e7       	ldi	r24, 0x76	; 118
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 57       	subi	r30, 0x77	; 119
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	aa e7       	ldi	r26, 0x7A	; 122
    2ab2:	b4 e4       	ldi	r27, 0x44	; 68
    2ab4:	80 83       	st	Z, r24
    2ab6:	91 83       	std	Z+1, r25	; 0x01
    2ab8:	a2 83       	std	Z+2, r26	; 0x02
    2aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	8e 01       	movw	r16, r28
    2abe:	0b 57       	subi	r16, 0x7B	; 123
    2ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e7 57       	subi	r30, 0x77	; 119
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	60 81       	ld	r22, Z
    2aca:	71 81       	ldd	r23, Z+1	; 0x01
    2acc:	82 81       	ldd	r24, Z+2	; 0x02
    2ace:	93 81       	ldd	r25, Z+3	; 0x03
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	4a ef       	ldi	r20, 0xFA	; 250
    2ad6:	54 e4       	ldi	r21, 0x44	; 68
    2ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	80 83       	st	Z, r24
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	a2 83       	std	Z+2, r26	; 0x02
    2ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 57       	subi	r30, 0x7B	; 123
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	60 81       	ld	r22, Z
    2af2:	71 81       	ldd	r23, Z+1	; 0x01
    2af4:	82 81       	ldd	r24, Z+2	; 0x02
    2af6:	93 81       	ldd	r25, Z+3	; 0x03
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e8       	ldi	r20, 0x80	; 128
    2afe:	5f e3       	ldi	r21, 0x3F	; 63
    2b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b04:	88 23       	and	r24, r24
    2b06:	44 f4       	brge	.+16     	; 0x2b18 <main+0x252>
		__ticks = 1;
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 57       	subi	r30, 0x7D	; 125
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	64 c0       	rjmp	.+200    	; 0x2be0 <main+0x31a>
	else if (__tmp > 65535)
    2b18:	fe 01       	movw	r30, r28
    2b1a:	eb 57       	subi	r30, 0x7B	; 123
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	0c f0       	brlt	.+2      	; 0x2b38 <main+0x272>
    2b36:	43 c0       	rjmp	.+134    	; 0x2bbe <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e7 57       	subi	r30, 0x77	; 119
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8e 01       	movw	r16, r28
    2b58:	0d 57       	subi	r16, 0x7D	; 125
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	1f c0       	rjmp	.+62     	; 0x2bae <main+0x2e8>
    2b70:	fe 01       	movw	r30, r28
    2b72:	ef 57       	subi	r30, 0x7F	; 127
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 57       	subi	r30, 0x7F	; 127
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <main+0x2c2>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ef 57       	subi	r30, 0x7F	; 127
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	de 01       	movw	r26, r28
    2b98:	ad 57       	subi	r26, 0x7D	; 125
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ed 57       	subi	r30, 0x7D	; 125
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	11 96       	adiw	r26, 0x01	; 1
    2baa:	9c 93       	st	X, r25
    2bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ed 57       	subi	r30, 0x7D	; 125
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	d1 f6       	brne	.-76     	; 0x2b70 <main+0x2aa>
    2bbc:	27 c0       	rjmp	.+78     	; 0x2c0c <main+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	0d 57       	subi	r16, 0x7D	; 125
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	eb 57       	subi	r30, 0x7B	; 123
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	f8 01       	movw	r30, r16
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
    2be0:	de 01       	movw	r26, r28
    2be2:	a1 58       	subi	r26, 0x81	; 129
    2be4:	bf 4f       	sbci	r27, 0xFF	; 255
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 57       	subi	r30, 0x7D	; 125
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	8d 93       	st	X+, r24
    2bf2:	9c 93       	st	X, r25
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e1 58       	subi	r30, 0x81	; 129
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <main+0x338>
    2c02:	fe 01       	movw	r30, r28
    2c04:	e1 58       	subi	r30, 0x81	; 129
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_voidClearDisplay();
    2c0c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>

	LCD_voidGoToPos(0,1);
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>
	LCD_voidSendString("Password:");
    2c18:	85 e8       	ldi	r24, 0x85	; 133
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>

	TMRS_voidTimer1SetOverflowValue(19999);
    2c20:	8f e1       	ldi	r24, 0x1F	; 31
    2c22:	9e e4       	ldi	r25, 0x4E	; 78
    2c24:	0e 94 9a 12 	call	0x2534	; 0x2534 <TMRS_voidTimer1SetOverflowValue>

	while (1){

		// TMRS_voidTimer1SetCompareMatchValue(500);

		ADC_voidGetDigitalValueAsynch(ADC_u8_ADC_Channel_4,&GetDigital);
    2c28:	26 e5       	ldi	r18, 0x56	; 86
    2c2a:	34 e1       	ldi	r19, 0x14	; 20
    2c2c:	84 e0       	ldi	r24, 0x04	; 4
    2c2e:	b9 01       	movw	r22, r18
    2c30:	0e 94 1d 06 	call	0xc3a	; 0xc3a <ADC_voidGetDigitalValueAsynch>
		Local_u16AnalogValue=(App_u16ADCDigitalValue*5000UL)/1024;
    2c34:	80 91 56 01 	lds	r24, 0x0156
    2c38:	90 91 57 01 	lds	r25, 0x0157
    2c3c:	cc 01       	movw	r24, r24
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	28 e8       	ldi	r18, 0x88	; 136
    2c44:	33 e1       	ldi	r19, 0x13	; 19
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__mulsi3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	07 2e       	mov	r0, r23
    2c58:	7a e0       	ldi	r23, 0x0A	; 10
    2c5a:	b6 95       	lsr	r27
    2c5c:	a7 95       	ror	r26
    2c5e:	97 95       	ror	r25
    2c60:	87 95       	ror	r24
    2c62:	7a 95       	dec	r23
    2c64:	d1 f7       	brne	.-12     	; 0x2c5a <main+0x394>
    2c66:	70 2d       	mov	r23, r0
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e3 56       	subi	r30, 0x63	; 99
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	80 83       	st	Z, r24
		Local_u16Temp=Local_u16AnalogValue/10;
    2c72:	8e 01       	movw	r16, r28
    2c74:	05 56       	subi	r16, 0x65	; 101
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e3 56       	subi	r30, 0x63	; 99
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	2a e0       	ldi	r18, 0x0A	; 10
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	b9 01       	movw	r22, r18
    2c88:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__udivmodhi4>
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	f8 01       	movw	r30, r16
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	80 83       	st	Z, r24





			for (i=0;i<3;i++){
    2c94:	fe 01       	movw	r30, r28
    2c96:	ec 55       	subi	r30, 0x5C	; 92
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	10 82       	st	Z, r1
    2c9c:	45 c0       	rjmp	.+138    	; 0x2d28 <main+0x462>
				Reading =KPD_u8GetPressedKey();
    2c9e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <KPD_u8GetPressedKey>
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	ed 55       	subi	r30, 0x5D	; 93
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 83       	st	Z, r24
				if (Reading != 0xff){
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 55       	subi	r30, 0x5D	; 93
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	09 f1       	breq	.+66     	; 0x2cf8 <main+0x432>
				Password[i]=Reading;
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	ec 55       	subi	r30, 0x5C	; 92
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	8b 55       	subi	r24, 0x5B	; 91
    2cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc8:	dc 01       	movw	r26, r24
    2cca:	a2 0f       	add	r26, r18
    2ccc:	b3 1f       	adc	r27, r19
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 55       	subi	r30, 0x5D	; 93
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8c 93       	st	X, r24


				LCD_voidSendData(Password[i]);
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ec 55       	subi	r30, 0x5C	; 92
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	8b 55       	subi	r24, 0x5B	; 91
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	fc 01       	movw	r30, r24
    2cec:	e2 0f       	add	r30, r18
    2cee:	f3 1f       	adc	r31, r19
    2cf0:	80 81       	ld	r24, Z
    2cf2:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_voidSendData>
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <main+0x450>
				}
				else if (Reading == 0xff){
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ed 55       	subi	r30, 0x5D	; 93
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	80 81       	ld	r24, Z
    2d00:	8f 3f       	cpi	r24, 0xFF	; 255
    2d02:	49 f4       	brne	.+18     	; 0x2d16 <main+0x450>
					i--;
    2d04:	de 01       	movw	r26, r28
    2d06:	ac 55       	subi	r26, 0x5C	; 92
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ec 55       	subi	r30, 0x5C	; 92
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	81 50       	subi	r24, 0x01	; 1
    2d14:	8c 93       	st	X, r24





			for (i=0;i<3;i++){
    2d16:	de 01       	movw	r26, r28
    2d18:	ac 55       	subi	r26, 0x5C	; 92
    2d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ec 55       	subi	r30, 0x5C	; 92
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	8f 5f       	subi	r24, 0xFF	; 255
    2d26:	8c 93       	st	X, r24
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ec 55       	subi	r30, 0x5C	; 92
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	83 30       	cpi	r24, 0x03	; 3
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <main+0x470>
    2d34:	b4 cf       	rjmp	.-152    	; 0x2c9e <main+0x3d8>
    2d36:	fe 01       	movw	r30, r28
    2d38:	e5 58       	subi	r30, 0x85	; 133
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	aa ef       	ldi	r26, 0xFA	; 250
    2d42:	b4 e4       	ldi	r27, 0x44	; 68
    2d44:	80 83       	st	Z, r24
    2d46:	91 83       	std	Z+1, r25	; 0x01
    2d48:	a2 83       	std	Z+2, r26	; 0x02
    2d4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	09 58       	subi	r16, 0x89	; 137
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	e5 58       	subi	r30, 0x85	; 133
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	f8 01       	movw	r30, r16
    2d72:	80 83       	st	Z, r24
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	a2 83       	std	Z+2, r26	; 0x02
    2d78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e9 58       	subi	r30, 0x89	; 137
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	40 e8       	ldi	r20, 0x80	; 128
    2d8e:	5f e3       	ldi	r21, 0x3F	; 63
    2d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d94:	88 23       	and	r24, r24
    2d96:	44 f4       	brge	.+16     	; 0x2da8 <main+0x4e2>
		__ticks = 1;
    2d98:	fe 01       	movw	r30, r28
    2d9a:	eb 58       	subi	r30, 0x8B	; 139
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
    2da6:	64 c0       	rjmp	.+200    	; 0x2e70 <main+0x5aa>
	else if (__tmp > 65535)
    2da8:	fe 01       	movw	r30, r28
    2daa:	e9 58       	subi	r30, 0x89	; 137
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	57 e4       	ldi	r21, 0x47	; 71
    2dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	0c f0       	brlt	.+2      	; 0x2dc8 <main+0x502>
    2dc6:	43 c0       	rjmp	.+134    	; 0x2e4e <main+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e5 58       	subi	r30, 0x85	; 133
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8e 01       	movw	r16, r28
    2de8:	0b 58       	subi	r16, 0x8B	; 139
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	f8 01       	movw	r30, r16
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
    2dfe:	1f c0       	rjmp	.+62     	; 0x2e3e <main+0x578>
    2e00:	fe 01       	movw	r30, r28
    2e02:	ed 58       	subi	r30, 0x8D	; 141
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	88 ec       	ldi	r24, 0xC8	; 200
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ed 58       	subi	r30, 0x8D	; 141
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	91 81       	ldd	r25, Z+1	; 0x01
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <main+0x552>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ed 58       	subi	r30, 0x8D	; 141
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	91 83       	std	Z+1, r25	; 0x01
    2e24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e26:	de 01       	movw	r26, r28
    2e28:	ab 58       	subi	r26, 0x8B	; 139
    2e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	eb 58       	subi	r30, 0x8B	; 139
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	91 81       	ldd	r25, Z+1	; 0x01
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	11 96       	adiw	r26, 0x01	; 1
    2e3a:	9c 93       	st	X, r25
    2e3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3e:	fe 01       	movw	r30, r28
    2e40:	eb 58       	subi	r30, 0x8B	; 139
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	d1 f6       	brne	.-76     	; 0x2e00 <main+0x53a>
    2e4c:	28 c0       	rjmp	.+80     	; 0x2e9e <main+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	8e 01       	movw	r16, r28
    2e50:	0b 58       	subi	r16, 0x8B	; 139
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	e9 58       	subi	r30, 0x89	; 137
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	de 01       	movw	r26, r28
    2e72:	af 58       	subi	r26, 0x8F	; 143
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	eb 58       	subi	r30, 0x8B	; 139
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24
    2e86:	fe 01       	movw	r30, r28
    2e88:	ef 58       	subi	r30, 0x8F	; 143
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <main+0x5ca>
    2e94:	fe 01       	movw	r30, r28
    2e96:	ef 58       	subi	r30, 0x8F	; 143
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24

//Password Check



			if ((Password[0]=='1') && (Password[1]=='3') && (Password[2]=='3') ){
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	eb 55       	subi	r30, 0x5B	; 91
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	81 33       	cpi	r24, 0x31	; 49
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <main+0x5e6>
    2eaa:	8d c3       	rjmp	.+1818   	; 0x35c6 <main+0xd00>
    2eac:	fe 01       	movw	r30, r28
    2eae:	eb 55       	subi	r30, 0x5B	; 91
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	81 81       	ldd	r24, Z+1	; 0x01
    2eb4:	83 33       	cpi	r24, 0x33	; 51
    2eb6:	09 f0       	breq	.+2      	; 0x2eba <main+0x5f4>
    2eb8:	86 c3       	rjmp	.+1804   	; 0x35c6 <main+0xd00>
    2eba:	fe 01       	movw	r30, r28
    2ebc:	eb 55       	subi	r30, 0x5B	; 91
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	83 33       	cpi	r24, 0x33	; 51
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <main+0x602>
    2ec6:	7f c3       	rjmp	.+1790   	; 0x35c6 <main+0xd00>

				LCD_voidClearDisplay();
    2ec8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e3 59       	subi	r30, 0x93	; 147
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	aa e7       	ldi	r26, 0x7A	; 122
    2ed8:	b4 e4       	ldi	r27, 0x44	; 68
    2eda:	80 83       	st	Z, r24
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	a2 83       	std	Z+2, r26	; 0x02
    2ee0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	07 59       	subi	r16, 0x97	; 151
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e3 59       	subi	r30, 0x93	; 147
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	4a ef       	ldi	r20, 0xFA	; 250
    2efc:	54 e4       	ldi	r21, 0x44	; 68
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	f8 01       	movw	r30, r16
    2f08:	80 83       	st	Z, r24
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	a2 83       	std	Z+2, r26	; 0x02
    2f0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f10:	fe 01       	movw	r30, r28
    2f12:	e7 59       	subi	r30, 0x97	; 151
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e8       	ldi	r20, 0x80	; 128
    2f24:	5f e3       	ldi	r21, 0x3F	; 63
    2f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	44 f4       	brge	.+16     	; 0x2f3e <main+0x678>
		__ticks = 1;
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e9 59       	subi	r30, 0x99	; 153
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	91 83       	std	Z+1, r25	; 0x01
    2f3a:	80 83       	st	Z, r24
    2f3c:	64 c0       	rjmp	.+200    	; 0x3006 <main+0x740>
	else if (__tmp > 65535)
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e7 59       	subi	r30, 0x97	; 151
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	60 81       	ld	r22, Z
    2f46:	71 81       	ldd	r23, Z+1	; 0x01
    2f48:	82 81       	ldd	r24, Z+2	; 0x02
    2f4a:	93 81       	ldd	r25, Z+3	; 0x03
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	0c f0       	brlt	.+2      	; 0x2f5e <main+0x698>
    2f5c:	43 c0       	rjmp	.+134    	; 0x2fe4 <main+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e3 59       	subi	r30, 0x93	; 147
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	60 81       	ld	r22, Z
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	09 59       	subi	r16, 0x99	; 153
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	bc 01       	movw	r22, r24
    2f84:	cd 01       	movw	r24, r26
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	1f c0       	rjmp	.+62     	; 0x2fd4 <main+0x70e>
    2f96:	fe 01       	movw	r30, r28
    2f98:	eb 59       	subi	r30, 0x9B	; 155
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	eb 59       	subi	r30, 0x9B	; 155
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <main+0x6e8>
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	eb 59       	subi	r30, 0x9B	; 155
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fbc:	de 01       	movw	r26, r28
    2fbe:	a9 59       	subi	r26, 0x99	; 153
    2fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e9 59       	subi	r30, 0x99	; 153
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	9c 93       	st	X, r25
    2fd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e9 59       	subi	r30, 0x99	; 153
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	d1 f6       	brne	.-76     	; 0x2f96 <main+0x6d0>
    2fe2:	27 c0       	rjmp	.+78     	; 0x3032 <main+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe4:	8e 01       	movw	r16, r28
    2fe6:	09 59       	subi	r16, 0x99	; 153
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 59       	subi	r30, 0x97	; 151
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	f8 01       	movw	r30, r16
    3002:	91 83       	std	Z+1, r25	; 0x01
    3004:	80 83       	st	Z, r24
    3006:	de 01       	movw	r26, r28
    3008:	ad 59       	subi	r26, 0x9D	; 157
    300a:	bf 4f       	sbci	r27, 0xFF	; 255
    300c:	fe 01       	movw	r30, r28
    300e:	e9 59       	subi	r30, 0x99	; 153
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	8d 93       	st	X+, r24
    3018:	9c 93       	st	X, r25
    301a:	fe 01       	movw	r30, r28
    301c:	ed 59       	subi	r30, 0x9D	; 157
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <main+0x75e>
    3028:	fe 01       	movw	r30, r28
    302a:	ed 59       	subi	r30, 0x9D	; 157
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_voidSendString("Password Right");
    3032:	8f e8       	ldi	r24, 0x8F	; 143
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_HIGH);
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	65 e0       	ldi	r22, 0x05	; 5
    303e:	41 e0       	ldi	r20, 0x01	; 1
    3040:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
    3044:	fe 01       	movw	r30, r28
    3046:	e1 5a       	subi	r30, 0xA1	; 161
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e8       	ldi	r25, 0x80	; 128
    304e:	ab e3       	ldi	r26, 0x3B	; 59
    3050:	b5 e4       	ldi	r27, 0x45	; 69
    3052:	80 83       	st	Z, r24
    3054:	91 83       	std	Z+1, r25	; 0x01
    3056:	a2 83       	std	Z+2, r26	; 0x02
    3058:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305a:	8e 01       	movw	r16, r28
    305c:	05 5a       	subi	r16, 0xA5	; 165
    305e:	1f 4f       	sbci	r17, 0xFF	; 255
    3060:	fe 01       	movw	r30, r28
    3062:	e1 5a       	subi	r30, 0xA1	; 161
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	60 81       	ld	r22, Z
    3068:	71 81       	ldd	r23, Z+1	; 0x01
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a ef       	ldi	r20, 0xFA	; 250
    3074:	54 e4       	ldi	r21, 0x44	; 68
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	f8 01       	movw	r30, r16
    3080:	80 83       	st	Z, r24
    3082:	91 83       	std	Z+1, r25	; 0x01
    3084:	a2 83       	std	Z+2, r26	; 0x02
    3086:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3088:	fe 01       	movw	r30, r28
    308a:	e5 5a       	subi	r30, 0xA5	; 165
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	60 81       	ld	r22, Z
    3090:	71 81       	ldd	r23, Z+1	; 0x01
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	44 f4       	brge	.+16     	; 0x30b6 <main+0x7f0>
		__ticks = 1;
    30a6:	fe 01       	movw	r30, r28
    30a8:	e7 5a       	subi	r30, 0xA7	; 167
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
    30b4:	64 c0       	rjmp	.+200    	; 0x317e <main+0x8b8>
	else if (__tmp > 65535)
    30b6:	fe 01       	movw	r30, r28
    30b8:	e5 5a       	subi	r30, 0xA5	; 165
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	60 81       	ld	r22, Z
    30be:	71 81       	ldd	r23, Z+1	; 0x01
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	3f ef       	ldi	r19, 0xFF	; 255
    30c8:	4f e7       	ldi	r20, 0x7F	; 127
    30ca:	57 e4       	ldi	r21, 0x47	; 71
    30cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d0:	18 16       	cp	r1, r24
    30d2:	0c f0       	brlt	.+2      	; 0x30d6 <main+0x810>
    30d4:	43 c0       	rjmp	.+134    	; 0x315c <main+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d6:	fe 01       	movw	r30, r28
    30d8:	e1 5a       	subi	r30, 0xA1	; 161
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e2       	ldi	r20, 0x20	; 32
    30ea:	51 e4       	ldi	r21, 0x41	; 65
    30ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8e 01       	movw	r16, r28
    30f6:	07 5a       	subi	r16, 0xA7	; 167
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	f8 01       	movw	r30, r16
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	1f c0       	rjmp	.+62     	; 0x314c <main+0x886>
    310e:	fe 01       	movw	r30, r28
    3110:	e9 5a       	subi	r30, 0xA9	; 169
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24
    311c:	fe 01       	movw	r30, r28
    311e:	e9 5a       	subi	r30, 0xA9	; 169
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <main+0x860>
    312a:	fe 01       	movw	r30, r28
    312c:	e9 5a       	subi	r30, 0xA9	; 169
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	de 01       	movw	r26, r28
    3136:	a7 5a       	subi	r26, 0xA7	; 167
    3138:	bf 4f       	sbci	r27, 0xFF	; 255
    313a:	fe 01       	movw	r30, r28
    313c:	e7 5a       	subi	r30, 0xA7	; 167
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	11 96       	adiw	r26, 0x01	; 1
    3148:	9c 93       	st	X, r25
    314a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314c:	fe 01       	movw	r30, r28
    314e:	e7 5a       	subi	r30, 0xA7	; 167
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	91 81       	ldd	r25, Z+1	; 0x01
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	d1 f6       	brne	.-76     	; 0x310e <main+0x848>
    315a:	27 c0       	rjmp	.+78     	; 0x31aa <main+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	8e 01       	movw	r16, r28
    315e:	07 5a       	subi	r16, 0xA7	; 167
    3160:	1f 4f       	sbci	r17, 0xFF	; 255
    3162:	fe 01       	movw	r30, r28
    3164:	e5 5a       	subi	r30, 0xA5	; 165
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	60 81       	ld	r22, Z
    316a:	71 81       	ldd	r23, Z+1	; 0x01
    316c:	82 81       	ldd	r24, Z+2	; 0x02
    316e:	93 81       	ldd	r25, Z+3	; 0x03
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	f8 01       	movw	r30, r16
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	de 01       	movw	r26, r28
    3180:	ab 5a       	subi	r26, 0xAB	; 171
    3182:	bf 4f       	sbci	r27, 0xFF	; 255
    3184:	fe 01       	movw	r30, r28
    3186:	e7 5a       	subi	r30, 0xA7	; 167
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	80 81       	ld	r24, Z
    318c:	91 81       	ldd	r25, Z+1	; 0x01
    318e:	8d 93       	st	X+, r24
    3190:	9c 93       	st	X, r25
    3192:	fe 01       	movw	r30, r28
    3194:	eb 5a       	subi	r30, 0xAB	; 171
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <main+0x8d6>
    31a0:	fe 01       	movw	r30, r28
    31a2:	eb 5a       	subi	r30, 0xAB	; 171
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
				_delay_ms(3000);
				LCD_voidClearDisplay();
    31aa:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>

				LCD_voidSendString("Welcome");
    31ae:	8e e9       	ldi	r24, 0x9E	; 158
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    31b6:	fe 01       	movw	r30, r28
    31b8:	ef 5a       	subi	r30, 0xAF	; 175
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e8       	ldi	r25, 0x80	; 128
    31c0:	ab e3       	ldi	r26, 0x3B	; 59
    31c2:	b5 e4       	ldi	r27, 0x45	; 69
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	03 5b       	subi	r16, 0xB3	; 179
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	ef 5a       	subi	r30, 0xAF	; 175
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a ef       	ldi	r20, 0xFA	; 250
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	e3 5b       	subi	r30, 0xB3	; 179
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	44 f4       	brge	.+16     	; 0x3228 <main+0x962>
		__ticks = 1;
    3218:	fe 01       	movw	r30, r28
    321a:	e5 5b       	subi	r30, 0xB5	; 181
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	64 c0       	rjmp	.+200    	; 0x32f0 <main+0xa2a>
	else if (__tmp > 65535)
    3228:	fe 01       	movw	r30, r28
    322a:	e3 5b       	subi	r30, 0xB3	; 179
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <main+0x982>
    3246:	43 c0       	rjmp	.+134    	; 0x32ce <main+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3248:	fe 01       	movw	r30, r28
    324a:	ef 5a       	subi	r30, 0xAF	; 175
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8e 01       	movw	r16, r28
    3268:	05 5b       	subi	r16, 0xB5	; 181
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	f8 01       	movw	r30, r16
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
    327e:	1f c0       	rjmp	.+62     	; 0x32be <main+0x9f8>
    3280:	fe 01       	movw	r30, r28
    3282:	e7 5b       	subi	r30, 0xB7	; 183
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	fe 01       	movw	r30, r28
    3290:	e7 5b       	subi	r30, 0xB7	; 183
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <main+0x9d2>
    329c:	fe 01       	movw	r30, r28
    329e:	e7 5b       	subi	r30, 0xB7	; 183
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	de 01       	movw	r26, r28
    32a8:	a5 5b       	subi	r26, 0xB5	; 181
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	e5 5b       	subi	r30, 0xB5	; 181
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5b       	subi	r30, 0xB5	; 181
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	d1 f6       	brne	.-76     	; 0x3280 <main+0x9ba>
    32cc:	27 c0       	rjmp	.+78     	; 0x331c <main+0xa56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	8e 01       	movw	r16, r28
    32d0:	05 5b       	subi	r16, 0xB5	; 181
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e3 5b       	subi	r30, 0xB3	; 179
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	de 01       	movw	r26, r28
    32f2:	a9 5b       	subi	r26, 0xB9	; 185
    32f4:	bf 4f       	sbci	r27, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	e5 5b       	subi	r30, 0xB5	; 181
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	8d 93       	st	X+, r24
    3302:	9c 93       	st	X, r25
    3304:	fe 01       	movw	r30, r28
    3306:	e9 5b       	subi	r30, 0xB9	; 185
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <main+0xa48>
    3312:	fe 01       	movw	r30, r28
    3314:	e9 5b       	subi	r30, 0xB9	; 185
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
				_delay_ms(3000);
				LCD_voidClearDisplay();
    331c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>


			LCD_voidSendString("Temp:");
    3320:	86 ea       	ldi	r24, 0xA6	; 166
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
				LCD_voidWriteNumber(Local_u16Temp);
    3328:	fe 01       	movw	r30, r28
    332a:	e5 56       	subi	r30, 0x65	; 101
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	80 81       	ld	r24, Z
    3330:	91 81       	ldd	r25, Z+1	; 0x01
    3332:	cc 01       	movw	r24, r24
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_voidWriteNumber>
				LCD_voidSendString("  C");
    3340:	8c ea       	ldi	r24, 0xAC	; 172
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    3348:	fe 01       	movw	r30, r28
    334a:	ed 5b       	subi	r30, 0xBD	; 189
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e8       	ldi	r25, 0x80	; 128
    3352:	ab e3       	ldi	r26, 0x3B	; 59
    3354:	b5 e4       	ldi	r27, 0x45	; 69
    3356:	80 83       	st	Z, r24
    3358:	91 83       	std	Z+1, r25	; 0x01
    335a:	a2 83       	std	Z+2, r26	; 0x02
    335c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	8e 01       	movw	r16, r28
    3360:	01 5c       	subi	r16, 0xC1	; 193
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
    3364:	fe 01       	movw	r30, r28
    3366:	ed 5b       	subi	r30, 0xBD	; 189
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	60 81       	ld	r22, Z
    336c:	71 81       	ldd	r23, Z+1	; 0x01
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	93 81       	ldd	r25, Z+3	; 0x03
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	4a ef       	ldi	r20, 0xFA	; 250
    3378:	54 e4       	ldi	r21, 0x44	; 68
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	f8 01       	movw	r30, r16
    3384:	80 83       	st	Z, r24
    3386:	91 83       	std	Z+1, r25	; 0x01
    3388:	a2 83       	std	Z+2, r26	; 0x02
    338a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338c:	fe 01       	movw	r30, r28
    338e:	ff 96       	adiw	r30, 0x3f	; 63
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e8       	ldi	r20, 0x80	; 128
    339e:	5f e3       	ldi	r21, 0x3F	; 63
    33a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a4:	88 23       	and	r24, r24
    33a6:	2c f4       	brge	.+10     	; 0x33b2 <main+0xaec>
		__ticks = 1;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	9e af       	std	Y+62, r25	; 0x3e
    33ae:	8d af       	std	Y+61, r24	; 0x3d
    33b0:	46 c0       	rjmp	.+140    	; 0x343e <main+0xb78>
	else if (__tmp > 65535)
    33b2:	fe 01       	movw	r30, r28
    33b4:	ff 96       	adiw	r30, 0x3f	; 63
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	3f ef       	ldi	r19, 0xFF	; 255
    33c2:	4f e7       	ldi	r20, 0x7F	; 127
    33c4:	57 e4       	ldi	r21, 0x47	; 71
    33c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ca:	18 16       	cp	r1, r24
    33cc:	64 f5       	brge	.+88     	; 0x3426 <main+0xb60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	fe 01       	movw	r30, r28
    33d0:	ed 5b       	subi	r30, 0xBD	; 189
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	bc 01       	movw	r22, r24
    33ee:	cd 01       	movw	r24, r26
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	9e af       	std	Y+62, r25	; 0x3e
    33fa:	8d af       	std	Y+61, r24	; 0x3d
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <main+0xb56>
    33fe:	88 ec       	ldi	r24, 0xC8	; 200
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9c af       	std	Y+60, r25	; 0x3c
    3404:	8b af       	std	Y+59, r24	; 0x3b
    3406:	8b ad       	ldd	r24, Y+59	; 0x3b
    3408:	9c ad       	ldd	r25, Y+60	; 0x3c
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <main+0xb44>
    340e:	9c af       	std	Y+60, r25	; 0x3c
    3410:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3412:	8d ad       	ldd	r24, Y+61	; 0x3d
    3414:	9e ad       	ldd	r25, Y+62	; 0x3e
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	9e af       	std	Y+62, r25	; 0x3e
    341a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341c:	8d ad       	ldd	r24, Y+61	; 0x3d
    341e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	69 f7       	brne	.-38     	; 0x33fe <main+0xb38>
    3424:	16 c0       	rjmp	.+44     	; 0x3452 <main+0xb8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3426:	fe 01       	movw	r30, r28
    3428:	ff 96       	adiw	r30, 0x3f	; 63
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	82 81       	ldd	r24, Z+2	; 0x02
    3430:	93 81       	ldd	r25, Z+3	; 0x03
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9e af       	std	Y+62, r25	; 0x3e
    343c:	8d af       	std	Y+61, r24	; 0x3d
    343e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3440:	9e ad       	ldd	r25, Y+62	; 0x3e
    3442:	9a af       	std	Y+58, r25	; 0x3a
    3444:	89 af       	std	Y+57, r24	; 0x39
    3446:	89 ad       	ldd	r24, Y+57	; 0x39
    3448:	9a ad       	ldd	r25, Y+58	; 0x3a
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <main+0xb84>
    344e:	9a af       	std	Y+58, r25	; 0x3a
    3450:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(3000);
				LCD_voidClearDisplay();
    3452:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>


				// TMRS_voidTimer1SetCompareMatchValue(2200);
				 TMRS_voidTimer1SetCompareMatchValue(2000);
    3456:	80 ed       	ldi	r24, 0xD0	; 208
    3458:	97 e0       	ldi	r25, 0x07	; 7
    345a:	0e 94 88 12 	call	0x2510	; 0x2510 <TMRS_voidTimer1SetCompareMatchValue>
				LCD_voidSendString("Door Close");
    345e:	80 eb       	ldi	r24, 0xB0	; 176
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
				LCD_voidGoToPos(1,0);
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>
				LCD_voidSendString("After 5 sec");
    346e:	8b eb       	ldi	r24, 0xBB	; 187
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>



				for (time=5;time>0;time--){
    3476:	fe 01       	movw	r30, r28
    3478:	e1 56       	subi	r30, 0x61	; 97
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	85 e0       	ldi	r24, 0x05	; 5
    347e:	80 83       	st	Z, r24
    3480:	8b c0       	rjmp	.+278    	; 0x3598 <main+0xcd2>
				LCD_voidGoToPos(1,13);
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	6d e0       	ldi	r22, 0x0D	; 13
    3486:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_voidGoToPos>
				LCD_voidWriteNumber(time);
    348a:	fe 01       	movw	r30, r28
    348c:	e1 56       	subi	r30, 0x61	; 97
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	88 2f       	mov	r24, r24
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_voidWriteNumber>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	aa e7       	ldi	r26, 0x7A	; 122
    34a8:	b4 e4       	ldi	r27, 0x44	; 68
    34aa:	8d ab       	std	Y+53, r24	; 0x35
    34ac:	9e ab       	std	Y+54, r25	; 0x36
    34ae:	af ab       	std	Y+55, r26	; 0x37
    34b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b2:	6d a9       	ldd	r22, Y+53	; 0x35
    34b4:	7e a9       	ldd	r23, Y+54	; 0x36
    34b6:	8f a9       	ldd	r24, Y+55	; 0x37
    34b8:	98 ad       	ldd	r25, Y+56	; 0x38
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a ef       	ldi	r20, 0xFA	; 250
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	89 ab       	std	Y+49, r24	; 0x31
    34cc:	9a ab       	std	Y+50, r25	; 0x32
    34ce:	ab ab       	std	Y+51, r26	; 0x33
    34d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34d2:	69 a9       	ldd	r22, Y+49	; 0x31
    34d4:	7a a9       	ldd	r23, Y+50	; 0x32
    34d6:	8b a9       	ldd	r24, Y+51	; 0x33
    34d8:	9c a9       	ldd	r25, Y+52	; 0x34
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <main+0xc2e>
		__ticks = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	98 ab       	std	Y+48, r25	; 0x30
    34f0:	8f a7       	std	Y+47, r24	; 0x2f
    34f2:	3f c0       	rjmp	.+126    	; 0x3572 <main+0xcac>
	else if (__tmp > 65535)
    34f4:	69 a9       	ldd	r22, Y+49	; 0x31
    34f6:	7a a9       	ldd	r23, Y+50	; 0x32
    34f8:	8b a9       	ldd	r24, Y+51	; 0x33
    34fa:	9c a9       	ldd	r25, Y+52	; 0x34
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	4c f5       	brge	.+82     	; 0x355e <main+0xc98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	6d a9       	ldd	r22, Y+53	; 0x35
    350e:	7e a9       	ldd	r23, Y+54	; 0x36
    3510:	8f a9       	ldd	r24, Y+55	; 0x37
    3512:	98 ad       	ldd	r25, Y+56	; 0x38
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e2       	ldi	r20, 0x20	; 32
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	98 ab       	std	Y+48, r25	; 0x30
    3532:	8f a7       	std	Y+47, r24	; 0x2f
    3534:	0f c0       	rjmp	.+30     	; 0x3554 <main+0xc8e>
    3536:	88 ec       	ldi	r24, 0xC8	; 200
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	9e a7       	std	Y+46, r25	; 0x2e
    353c:	8d a7       	std	Y+45, r24	; 0x2d
    353e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3540:	9e a5       	ldd	r25, Y+46	; 0x2e
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <main+0xc7c>
    3546:	9e a7       	std	Y+46, r25	; 0x2e
    3548:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	8f a5       	ldd	r24, Y+47	; 0x2f
    354c:	98 a9       	ldd	r25, Y+48	; 0x30
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	98 ab       	std	Y+48, r25	; 0x30
    3552:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	8f a5       	ldd	r24, Y+47	; 0x2f
    3556:	98 a9       	ldd	r25, Y+48	; 0x30
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f7       	brne	.-38     	; 0x3536 <main+0xc70>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <main+0xcc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	69 a9       	ldd	r22, Y+49	; 0x31
    3560:	7a a9       	ldd	r23, Y+50	; 0x32
    3562:	8b a9       	ldd	r24, Y+51	; 0x33
    3564:	9c a9       	ldd	r25, Y+52	; 0x34
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	98 ab       	std	Y+48, r25	; 0x30
    3570:	8f a7       	std	Y+47, r24	; 0x2f
    3572:	8f a5       	ldd	r24, Y+47	; 0x2f
    3574:	98 a9       	ldd	r25, Y+48	; 0x30
    3576:	9c a7       	std	Y+44, r25	; 0x2c
    3578:	8b a7       	std	Y+43, r24	; 0x2b
    357a:	8b a5       	ldd	r24, Y+43	; 0x2b
    357c:	9c a5       	ldd	r25, Y+44	; 0x2c
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <main+0xcb8>
    3582:	9c a7       	std	Y+44, r25	; 0x2c
    3584:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_voidGoToPos(1,0);
				LCD_voidSendString("After 5 sec");



				for (time=5;time>0;time--){
    3586:	de 01       	movw	r26, r28
    3588:	a1 56       	subi	r26, 0x61	; 97
    358a:	bf 4f       	sbci	r27, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	e1 56       	subi	r30, 0x61	; 97
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	81 50       	subi	r24, 0x01	; 1
    3596:	8c 93       	st	X, r24
    3598:	fe 01       	movw	r30, r28
    359a:	e1 56       	subi	r30, 0x61	; 97
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	88 23       	and	r24, r24
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <main+0xce0>
    35a4:	6e cf       	rjmp	.-292    	; 0x3482 <main+0xbbc>
				LCD_voidWriteNumber(time);
				_delay_ms(1000);
						                  }

				// TMRS_voidTimer1SetCompareMatchValue(500);
				 TMRS_voidTimer1SetCompareMatchValue(1000);
    35a6:	88 ee       	ldi	r24, 0xE8	; 232
    35a8:	93 e0       	ldi	r25, 0x03	; 3
    35aa:	0e 94 88 12 	call	0x2510	; 0x2510 <TMRS_voidTimer1SetCompareMatchValue>



				DIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN5,DIO_u8_LOW);
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	65 e0       	ldi	r22, 0x05	; 5
    35b2:	40 e0       	ldi	r20, 0x00	; 0
    35b4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
				LCD_voidClearDisplay();
    35b8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>
				LCD_voidSendString("Password:");
    35bc:	85 e8       	ldi	r24, 0x85	; 133
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    35c4:	82 c1       	rjmp	.+772    	; 0x38ca <main+0x1004>


		}
			else {
				LCD_voidClearDisplay();
    35c6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	aa e7       	ldi	r26, 0x7A	; 122
    35d0:	b4 e4       	ldi	r27, 0x44	; 68
    35d2:	8f a3       	std	Y+39, r24	; 0x27
    35d4:	98 a7       	std	Y+40, r25	; 0x28
    35d6:	a9 a7       	std	Y+41, r26	; 0x29
    35d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35da:	6f a1       	ldd	r22, Y+39	; 0x27
    35dc:	78 a5       	ldd	r23, Y+40	; 0x28
    35de:	89 a5       	ldd	r24, Y+41	; 0x29
    35e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	4a ef       	ldi	r20, 0xFA	; 250
    35e8:	54 e4       	ldi	r21, 0x44	; 68
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	8b a3       	std	Y+35, r24	; 0x23
    35f4:	9c a3       	std	Y+36, r25	; 0x24
    35f6:	ad a3       	std	Y+37, r26	; 0x25
    35f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35fa:	6b a1       	ldd	r22, Y+35	; 0x23
    35fc:	7c a1       	ldd	r23, Y+36	; 0x24
    35fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3600:	9e a1       	ldd	r25, Y+38	; 0x26
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360e:	88 23       	and	r24, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <main+0xd56>
		__ticks = 1;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9a a3       	std	Y+34, r25	; 0x22
    3618:	89 a3       	std	Y+33, r24	; 0x21
    361a:	3f c0       	rjmp	.+126    	; 0x369a <main+0xdd4>
	else if (__tmp > 65535)
    361c:	6b a1       	ldd	r22, Y+35	; 0x23
    361e:	7c a1       	ldd	r23, Y+36	; 0x24
    3620:	8d a1       	ldd	r24, Y+37	; 0x25
    3622:	9e a1       	ldd	r25, Y+38	; 0x26
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	3f ef       	ldi	r19, 0xFF	; 255
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	57 e4       	ldi	r21, 0x47	; 71
    362c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3630:	18 16       	cp	r1, r24
    3632:	4c f5       	brge	.+82     	; 0x3686 <main+0xdc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3634:	6f a1       	ldd	r22, Y+39	; 0x27
    3636:	78 a5       	ldd	r23, Y+40	; 0x28
    3638:	89 a5       	ldd	r24, Y+41	; 0x29
    363a:	9a a5       	ldd	r25, Y+42	; 0x2a
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e2       	ldi	r20, 0x20	; 32
    3642:	51 e4       	ldi	r21, 0x41	; 65
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	bc 01       	movw	r22, r24
    364e:	cd 01       	movw	r24, r26
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9a a3       	std	Y+34, r25	; 0x22
    365a:	89 a3       	std	Y+33, r24	; 0x21
    365c:	0f c0       	rjmp	.+30     	; 0x367c <main+0xdb6>
    365e:	88 ec       	ldi	r24, 0xC8	; 200
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	98 a3       	std	Y+32, r25	; 0x20
    3664:	8f 8f       	std	Y+31, r24	; 0x1f
    3666:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3668:	98 a1       	ldd	r25, Y+32	; 0x20
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <main+0xda4>
    366e:	98 a3       	std	Y+32, r25	; 0x20
    3670:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3672:	89 a1       	ldd	r24, Y+33	; 0x21
    3674:	9a a1       	ldd	r25, Y+34	; 0x22
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	9a a3       	std	Y+34, r25	; 0x22
    367a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367c:	89 a1       	ldd	r24, Y+33	; 0x21
    367e:	9a a1       	ldd	r25, Y+34	; 0x22
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	69 f7       	brne	.-38     	; 0x365e <main+0xd98>
    3684:	14 c0       	rjmp	.+40     	; 0x36ae <main+0xde8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3686:	6b a1       	ldd	r22, Y+35	; 0x23
    3688:	7c a1       	ldd	r23, Y+36	; 0x24
    368a:	8d a1       	ldd	r24, Y+37	; 0x25
    368c:	9e a1       	ldd	r25, Y+38	; 0x26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9a a3       	std	Y+34, r25	; 0x22
    3698:	89 a3       	std	Y+33, r24	; 0x21
    369a:	89 a1       	ldd	r24, Y+33	; 0x21
    369c:	9a a1       	ldd	r25, Y+34	; 0x22
    369e:	9e 8f       	std	Y+30, r25	; 0x1e
    36a0:	8d 8f       	std	Y+29, r24	; 0x1d
    36a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <main+0xde0>
    36aa:	9e 8f       	std	Y+30, r25	; 0x1e
    36ac:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_voidSendString("Password Wrong");
    36ae:	87 ec       	ldi	r24, 0xC7	; 199
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
				flag++;
    36b6:	de 01       	movw	r26, r28
    36b8:	af 55       	subi	r26, 0x5F	; 95
    36ba:	bf 4f       	sbci	r27, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	ef 55       	subi	r30, 0x5F	; 95
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 81       	ld	r24, Z
    36c4:	8f 5f       	subi	r24, 0xFF	; 255
    36c6:	8c 93       	st	X, r24
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e8       	ldi	r25, 0x80	; 128
    36cc:	ab e3       	ldi	r26, 0x3B	; 59
    36ce:	b5 e4       	ldi	r27, 0x45	; 69
    36d0:	89 8f       	std	Y+25, r24	; 0x19
    36d2:	9a 8f       	std	Y+26, r25	; 0x1a
    36d4:	ab 8f       	std	Y+27, r26	; 0x1b
    36d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	69 8d       	ldd	r22, Y+25	; 0x19
    36da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	4a ef       	ldi	r20, 0xFA	; 250
    36e6:	54 e4       	ldi	r21, 0x44	; 68
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	8d 8b       	std	Y+21, r24	; 0x15
    36f2:	9e 8b       	std	Y+22, r25	; 0x16
    36f4:	af 8b       	std	Y+23, r26	; 0x17
    36f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36f8:	6d 89       	ldd	r22, Y+21	; 0x15
    36fa:	7e 89       	ldd	r23, Y+22	; 0x16
    36fc:	8f 89       	ldd	r24, Y+23	; 0x17
    36fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e8       	ldi	r20, 0x80	; 128
    3706:	5f e3       	ldi	r21, 0x3F	; 63
    3708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    370c:	88 23       	and	r24, r24
    370e:	2c f4       	brge	.+10     	; 0x371a <main+0xe54>
		__ticks = 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	9c 8b       	std	Y+20, r25	; 0x14
    3716:	8b 8b       	std	Y+19, r24	; 0x13
    3718:	3f c0       	rjmp	.+126    	; 0x3798 <main+0xed2>
	else if (__tmp > 65535)
    371a:	6d 89       	ldd	r22, Y+21	; 0x15
    371c:	7e 89       	ldd	r23, Y+22	; 0x16
    371e:	8f 89       	ldd	r24, Y+23	; 0x17
    3720:	98 8d       	ldd	r25, Y+24	; 0x18
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	3f ef       	ldi	r19, 0xFF	; 255
    3726:	4f e7       	ldi	r20, 0x7F	; 127
    3728:	57 e4       	ldi	r21, 0x47	; 71
    372a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    372e:	18 16       	cp	r1, r24
    3730:	4c f5       	brge	.+82     	; 0x3784 <main+0xebe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	69 8d       	ldd	r22, Y+25	; 0x19
    3734:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3738:	9c 8d       	ldd	r25, Y+28	; 0x1c
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e2       	ldi	r20, 0x20	; 32
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	9c 8b       	std	Y+20, r25	; 0x14
    3758:	8b 8b       	std	Y+19, r24	; 0x13
    375a:	0f c0       	rjmp	.+30     	; 0x377a <main+0xeb4>
    375c:	88 ec       	ldi	r24, 0xC8	; 200
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9a 8b       	std	Y+18, r25	; 0x12
    3762:	89 8b       	std	Y+17, r24	; 0x11
    3764:	89 89       	ldd	r24, Y+17	; 0x11
    3766:	9a 89       	ldd	r25, Y+18	; 0x12
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	f1 f7       	brne	.-4      	; 0x3768 <main+0xea2>
    376c:	9a 8b       	std	Y+18, r25	; 0x12
    376e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3770:	8b 89       	ldd	r24, Y+19	; 0x13
    3772:	9c 89       	ldd	r25, Y+20	; 0x14
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	9c 8b       	std	Y+20, r25	; 0x14
    3778:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377a:	8b 89       	ldd	r24, Y+19	; 0x13
    377c:	9c 89       	ldd	r25, Y+20	; 0x14
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	69 f7       	brne	.-38     	; 0x375c <main+0xe96>
    3782:	14 c0       	rjmp	.+40     	; 0x37ac <main+0xee6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3784:	6d 89       	ldd	r22, Y+21	; 0x15
    3786:	7e 89       	ldd	r23, Y+22	; 0x16
    3788:	8f 89       	ldd	r24, Y+23	; 0x17
    378a:	98 8d       	ldd	r25, Y+24	; 0x18
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9c 8b       	std	Y+20, r25	; 0x14
    3796:	8b 8b       	std	Y+19, r24	; 0x13
    3798:	8b 89       	ldd	r24, Y+19	; 0x13
    379a:	9c 89       	ldd	r25, Y+20	; 0x14
    379c:	98 8b       	std	Y+16, r25	; 0x10
    379e:	8f 87       	std	Y+15, r24	; 0x0f
    37a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37a2:	98 89       	ldd	r25, Y+16	; 0x10
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <main+0xede>
    37a8:	98 8b       	std	Y+16, r25	; 0x10
    37aa:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(3000);
				LCD_voidClearDisplay();
    37ac:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>

				if (flag == 2){
    37b0:	fe 01       	movw	r30, r28
    37b2:	ef 55       	subi	r30, 0x5F	; 95
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	82 30       	cpi	r24, 0x02	; 2
    37ba:	29 f4       	brne	.+10     	; 0x37c6 <main+0xf00>
					LCD_voidSendString("Last Try");
    37bc:	86 ed       	ldi	r24, 0xD6	; 214
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    37c4:	0a c0       	rjmp	.+20     	; 0x37da <main+0xf14>
				}
				else if (flag < 2){
    37c6:	fe 01       	movw	r30, r28
    37c8:	ef 55       	subi	r30, 0x5F	; 95
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	82 30       	cpi	r24, 0x02	; 2
    37d0:	20 f4       	brcc	.+8      	; 0x37da <main+0xf14>
					LCD_voidSendString("Try Again");
    37d2:	8f ed       	ldi	r24, 0xDF	; 223
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e8       	ldi	r25, 0x80	; 128
    37de:	ab e3       	ldi	r26, 0x3B	; 59
    37e0:	b5 e4       	ldi	r27, 0x45	; 69
    37e2:	8b 87       	std	Y+11, r24	; 0x0b
    37e4:	9c 87       	std	Y+12, r25	; 0x0c
    37e6:	ad 87       	std	Y+13, r26	; 0x0d
    37e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	4a ef       	ldi	r20, 0xFA	; 250
    37f8:	54 e4       	ldi	r21, 0x44	; 68
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	8f 83       	std	Y+7, r24	; 0x07
    3804:	98 87       	std	Y+8, r25	; 0x08
    3806:	a9 87       	std	Y+9, r26	; 0x09
    3808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    380a:	6f 81       	ldd	r22, Y+7	; 0x07
    380c:	78 85       	ldd	r23, Y+8	; 0x08
    380e:	89 85       	ldd	r24, Y+9	; 0x09
    3810:	9a 85       	ldd	r25, Y+10	; 0x0a
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e8       	ldi	r20, 0x80	; 128
    3818:	5f e3       	ldi	r21, 0x3F	; 63
    381a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381e:	88 23       	and	r24, r24
    3820:	2c f4       	brge	.+10     	; 0x382c <main+0xf66>
		__ticks = 1;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	3f c0       	rjmp	.+126    	; 0x38aa <main+0xfe4>
	else if (__tmp > 65535)
    382c:	6f 81       	ldd	r22, Y+7	; 0x07
    382e:	78 85       	ldd	r23, Y+8	; 0x08
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	4c f5       	brge	.+82     	; 0x3896 <main+0xfd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3844:	6b 85       	ldd	r22, Y+11	; 0x0b
    3846:	7c 85       	ldd	r23, Y+12	; 0x0c
    3848:	8d 85       	ldd	r24, Y+13	; 0x0d
    384a:	9e 85       	ldd	r25, Y+14	; 0x0e
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e2       	ldi	r20, 0x20	; 32
    3852:	51 e4       	ldi	r21, 0x41	; 65
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9e 83       	std	Y+6, r25	; 0x06
    386a:	8d 83       	std	Y+5, r24	; 0x05
    386c:	0f c0       	rjmp	.+30     	; 0x388c <main+0xfc6>
    386e:	88 ec       	ldi	r24, 0xC8	; 200
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	9c 83       	std	Y+4, r25	; 0x04
    3874:	8b 83       	std	Y+3, r24	; 0x03
    3876:	8b 81       	ldd	r24, Y+3	; 0x03
    3878:	9c 81       	ldd	r25, Y+4	; 0x04
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <main+0xfb4>
    387e:	9c 83       	std	Y+4, r25	; 0x04
    3880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	69 f7       	brne	.-38     	; 0x386e <main+0xfa8>
    3894:	14 c0       	rjmp	.+40     	; 0x38be <main+0xff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	8d 81       	ldd	r24, Y+5	; 0x05
    38ac:	9e 81       	ldd	r25, Y+6	; 0x06
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <main+0xff0>
    38ba:	9a 83       	std	Y+2, r25	; 0x02
    38bc:	89 83       	std	Y+1, r24	; 0x01
				}

				_delay_ms(3000);
				LCD_voidClearDisplay();
    38be:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>
				LCD_voidSendString("Password:");
    38c2:	85 e8       	ldi	r24, 0x85	; 133
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>


					}
			if (flag == 3){
    38ca:	fe 01       	movw	r30, r28
    38cc:	ef 55       	subi	r30, 0x5F	; 95
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 81       	ld	r24, Z
    38d2:	83 30       	cpi	r24, 0x03	; 3
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <main+0x1012>
    38d6:	a8 c9       	rjmp	.-3248   	; 0x2c28 <main+0x362>

				LCD_voidClearDisplay();
    38d8:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_voidClearDisplay>
				LCD_voidSendString("Buzzer Alerted");
    38dc:	89 ee       	ldi	r24, 0xE9	; 233
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_voidSendString>
				DIO_voidSetPinValue(DIO_u8_PORTA , DIO_u8_PIN6 , DIO_u8_HIGH);
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	66 e0       	ldi	r22, 0x06	; 6
    38e8:	41 e0       	ldi	r20, 0x01	; 1
    38ea:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_u8_PORTA , DIO_u8_PIN7 , DIO_u8_HIGH);
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	67 e0       	ldi	r22, 0x07	; 7
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DIO_voidSetPinValue>
    38f8:	97 c9       	rjmp	.-3282   	; 0x2c28 <main+0x362>

000038fa <__mulsi3>:
    38fa:	62 9f       	mul	r22, r18
    38fc:	d0 01       	movw	r26, r0
    38fe:	73 9f       	mul	r23, r19
    3900:	f0 01       	movw	r30, r0
    3902:	82 9f       	mul	r24, r18
    3904:	e0 0d       	add	r30, r0
    3906:	f1 1d       	adc	r31, r1
    3908:	64 9f       	mul	r22, r20
    390a:	e0 0d       	add	r30, r0
    390c:	f1 1d       	adc	r31, r1
    390e:	92 9f       	mul	r25, r18
    3910:	f0 0d       	add	r31, r0
    3912:	83 9f       	mul	r24, r19
    3914:	f0 0d       	add	r31, r0
    3916:	74 9f       	mul	r23, r20
    3918:	f0 0d       	add	r31, r0
    391a:	65 9f       	mul	r22, r21
    391c:	f0 0d       	add	r31, r0
    391e:	99 27       	eor	r25, r25
    3920:	72 9f       	mul	r23, r18
    3922:	b0 0d       	add	r27, r0
    3924:	e1 1d       	adc	r30, r1
    3926:	f9 1f       	adc	r31, r25
    3928:	63 9f       	mul	r22, r19
    392a:	b0 0d       	add	r27, r0
    392c:	e1 1d       	adc	r30, r1
    392e:	f9 1f       	adc	r31, r25
    3930:	bd 01       	movw	r22, r26
    3932:	cf 01       	movw	r24, r30
    3934:	11 24       	eor	r1, r1
    3936:	08 95       	ret

00003938 <__udivmodhi4>:
    3938:	aa 1b       	sub	r26, r26
    393a:	bb 1b       	sub	r27, r27
    393c:	51 e1       	ldi	r21, 0x11	; 17
    393e:	07 c0       	rjmp	.+14     	; 0x394e <__udivmodhi4_ep>

00003940 <__udivmodhi4_loop>:
    3940:	aa 1f       	adc	r26, r26
    3942:	bb 1f       	adc	r27, r27
    3944:	a6 17       	cp	r26, r22
    3946:	b7 07       	cpc	r27, r23
    3948:	10 f0       	brcs	.+4      	; 0x394e <__udivmodhi4_ep>
    394a:	a6 1b       	sub	r26, r22
    394c:	b7 0b       	sbc	r27, r23

0000394e <__udivmodhi4_ep>:
    394e:	88 1f       	adc	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	5a 95       	dec	r21
    3954:	a9 f7       	brne	.-22     	; 0x3940 <__udivmodhi4_loop>
    3956:	80 95       	com	r24
    3958:	90 95       	com	r25
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	08 95       	ret

00003960 <__udivmodsi4>:
    3960:	a1 e2       	ldi	r26, 0x21	; 33
    3962:	1a 2e       	mov	r1, r26
    3964:	aa 1b       	sub	r26, r26
    3966:	bb 1b       	sub	r27, r27
    3968:	fd 01       	movw	r30, r26
    396a:	0d c0       	rjmp	.+26     	; 0x3986 <__udivmodsi4_ep>

0000396c <__udivmodsi4_loop>:
    396c:	aa 1f       	adc	r26, r26
    396e:	bb 1f       	adc	r27, r27
    3970:	ee 1f       	adc	r30, r30
    3972:	ff 1f       	adc	r31, r31
    3974:	a2 17       	cp	r26, r18
    3976:	b3 07       	cpc	r27, r19
    3978:	e4 07       	cpc	r30, r20
    397a:	f5 07       	cpc	r31, r21
    397c:	20 f0       	brcs	.+8      	; 0x3986 <__udivmodsi4_ep>
    397e:	a2 1b       	sub	r26, r18
    3980:	b3 0b       	sbc	r27, r19
    3982:	e4 0b       	sbc	r30, r20
    3984:	f5 0b       	sbc	r31, r21

00003986 <__udivmodsi4_ep>:
    3986:	66 1f       	adc	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	88 1f       	adc	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	1a 94       	dec	r1
    3990:	69 f7       	brne	.-38     	; 0x396c <__udivmodsi4_loop>
    3992:	60 95       	com	r22
    3994:	70 95       	com	r23
    3996:	80 95       	com	r24
    3998:	90 95       	com	r25
    399a:	9b 01       	movw	r18, r22
    399c:	ac 01       	movw	r20, r24
    399e:	bd 01       	movw	r22, r26
    39a0:	cf 01       	movw	r24, r30
    39a2:	08 95       	ret

000039a4 <__prologue_saves__>:
    39a4:	2f 92       	push	r2
    39a6:	3f 92       	push	r3
    39a8:	4f 92       	push	r4
    39aa:	5f 92       	push	r5
    39ac:	6f 92       	push	r6
    39ae:	7f 92       	push	r7
    39b0:	8f 92       	push	r8
    39b2:	9f 92       	push	r9
    39b4:	af 92       	push	r10
    39b6:	bf 92       	push	r11
    39b8:	cf 92       	push	r12
    39ba:	df 92       	push	r13
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
    39cc:	ca 1b       	sub	r28, r26
    39ce:	db 0b       	sbc	r29, r27
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	09 94       	ijmp

000039dc <__epilogue_restores__>:
    39dc:	2a 88       	ldd	r2, Y+18	; 0x12
    39de:	39 88       	ldd	r3, Y+17	; 0x11
    39e0:	48 88       	ldd	r4, Y+16	; 0x10
    39e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    39e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    39e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    39ee:	b9 84       	ldd	r11, Y+9	; 0x09
    39f0:	c8 84       	ldd	r12, Y+8	; 0x08
    39f2:	df 80       	ldd	r13, Y+7	; 0x07
    39f4:	ee 80       	ldd	r14, Y+6	; 0x06
    39f6:	fd 80       	ldd	r15, Y+5	; 0x05
    39f8:	0c 81       	ldd	r16, Y+4	; 0x04
    39fa:	1b 81       	ldd	r17, Y+3	; 0x03
    39fc:	aa 81       	ldd	r26, Y+2	; 0x02
    39fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3a00:	ce 0f       	add	r28, r30
    3a02:	d1 1d       	adc	r29, r1
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	de bf       	out	0x3e, r29	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	cd bf       	out	0x3d, r28	; 61
    3a0e:	ed 01       	movw	r28, r26
    3a10:	08 95       	ret

00003a12 <itoa>:
    3a12:	fb 01       	movw	r30, r22
    3a14:	9f 01       	movw	r18, r30
    3a16:	e8 94       	clt
    3a18:	42 30       	cpi	r20, 0x02	; 2
    3a1a:	c4 f0       	brlt	.+48     	; 0x3a4c <itoa+0x3a>
    3a1c:	45 32       	cpi	r20, 0x25	; 37
    3a1e:	b4 f4       	brge	.+44     	; 0x3a4c <itoa+0x3a>
    3a20:	4a 30       	cpi	r20, 0x0A	; 10
    3a22:	29 f4       	brne	.+10     	; 0x3a2e <itoa+0x1c>
    3a24:	97 fb       	bst	r25, 7
    3a26:	1e f4       	brtc	.+6      	; 0x3a2e <itoa+0x1c>
    3a28:	90 95       	com	r25
    3a2a:	81 95       	neg	r24
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	64 2f       	mov	r22, r20
    3a30:	77 27       	eor	r23, r23
    3a32:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__udivmodhi4>
    3a36:	80 5d       	subi	r24, 0xD0	; 208
    3a38:	8a 33       	cpi	r24, 0x3A	; 58
    3a3a:	0c f0       	brlt	.+2      	; 0x3a3e <itoa+0x2c>
    3a3c:	89 5d       	subi	r24, 0xD9	; 217
    3a3e:	81 93       	st	Z+, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	a1 f7       	brne	.-24     	; 0x3a2e <itoa+0x1c>
    3a46:	16 f4       	brtc	.+4      	; 0x3a4c <itoa+0x3a>
    3a48:	5d e2       	ldi	r21, 0x2D	; 45
    3a4a:	51 93       	st	Z+, r21
    3a4c:	10 82       	st	Z, r1
    3a4e:	c9 01       	movw	r24, r18
    3a50:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <strrev>

00003a54 <strrev>:
    3a54:	dc 01       	movw	r26, r24
    3a56:	fc 01       	movw	r30, r24
    3a58:	67 2f       	mov	r22, r23
    3a5a:	71 91       	ld	r23, Z+
    3a5c:	77 23       	and	r23, r23
    3a5e:	e1 f7       	brne	.-8      	; 0x3a58 <strrev+0x4>
    3a60:	32 97       	sbiw	r30, 0x02	; 2
    3a62:	04 c0       	rjmp	.+8      	; 0x3a6c <strrev+0x18>
    3a64:	7c 91       	ld	r23, X
    3a66:	6d 93       	st	X+, r22
    3a68:	70 83       	st	Z, r23
    3a6a:	62 91       	ld	r22, -Z
    3a6c:	ae 17       	cp	r26, r30
    3a6e:	bf 07       	cpc	r27, r31
    3a70:	c8 f3       	brcs	.-14     	; 0x3a64 <strrev+0x10>
    3a72:	08 95       	ret

00003a74 <_exit>:
    3a74:	f8 94       	cli

00003a76 <__stop_program>:
    3a76:	ff cf       	rjmp	.-2      	; 0x3a76 <__stop_program>
